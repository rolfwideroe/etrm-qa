//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ElvizTestUtils.LookUpServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Portfolio", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class Portfolio : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ContractsAllowedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExternalIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ParentCompanyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ParentPortfolioIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PortfolioIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PortfolioNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.Property[] PropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ReplicationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.PortfolioStatus StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ContractsAllowed {
            get {
                return this.ContractsAllowedField;
            }
            set {
                if ((this.ContractsAllowedField.Equals(value) != true)) {
                    this.ContractsAllowedField = value;
                    this.RaisePropertyChanged("ContractsAllowed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExternalId {
            get {
                return this.ExternalIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ExternalIdField, value) != true)) {
                    this.ExternalIdField = value;
                    this.RaisePropertyChanged("ExternalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ParentCompanyId {
            get {
                return this.ParentCompanyIdField;
            }
            set {
                if ((this.ParentCompanyIdField.Equals(value) != true)) {
                    this.ParentCompanyIdField = value;
                    this.RaisePropertyChanged("ParentCompanyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ParentPortfolioId {
            get {
                return this.ParentPortfolioIdField;
            }
            set {
                if ((this.ParentPortfolioIdField.Equals(value) != true)) {
                    this.ParentPortfolioIdField = value;
                    this.RaisePropertyChanged("ParentPortfolioId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PortfolioId {
            get {
                return this.PortfolioIdField;
            }
            set {
                if ((this.PortfolioIdField.Equals(value) != true)) {
                    this.PortfolioIdField = value;
                    this.RaisePropertyChanged("PortfolioId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PortfolioName {
            get {
                return this.PortfolioNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PortfolioNameField, value) != true)) {
                    this.PortfolioNameField = value;
                    this.RaisePropertyChanged("PortfolioName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.Property[] Properties {
            get {
                return this.PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertiesField, value) != true)) {
                    this.PropertiesField = value;
                    this.RaisePropertyChanged("Properties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ReplicationId {
            get {
                return this.ReplicationIdField;
            }
            set {
                if ((this.ReplicationIdField.Equals(value) != true)) {
                    this.ReplicationIdField = value;
                    this.RaisePropertyChanged("ReplicationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.PortfolioStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Property", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class Property : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ValueType {
            get {
                return this.ValueTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueTypeField, value) != true)) {
                    this.ValueTypeField = value;
                    this.RaisePropertyChanged("ValueType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PortfolioStatus", Namespace="Elviz.API")]
    public enum PortfolioStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Active = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Deleted = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Company", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class Company : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.Property[] AddressesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryIsoCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExternalIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrgNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ParentCompanyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.Property[] PhonesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.Property[] PropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ReplicationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ShortNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.CompanyStatus StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.Property[] Addresses {
            get {
                return this.AddressesField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressesField, value) != true)) {
                    this.AddressesField = value;
                    this.RaisePropertyChanged("Addresses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyId {
            get {
                return this.CompanyIdField;
            }
            set {
                if ((this.CompanyIdField.Equals(value) != true)) {
                    this.CompanyIdField = value;
                    this.RaisePropertyChanged("CompanyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryIsoCode {
            get {
                return this.CountryIsoCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryIsoCodeField, value) != true)) {
                    this.CountryIsoCodeField = value;
                    this.RaisePropertyChanged("CountryIsoCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExternalId {
            get {
                return this.ExternalIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ExternalIdField, value) != true)) {
                    this.ExternalIdField = value;
                    this.RaisePropertyChanged("ExternalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrgNo {
            get {
                return this.OrgNoField;
            }
            set {
                if ((object.ReferenceEquals(this.OrgNoField, value) != true)) {
                    this.OrgNoField = value;
                    this.RaisePropertyChanged("OrgNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ParentCompanyId {
            get {
                return this.ParentCompanyIdField;
            }
            set {
                if ((this.ParentCompanyIdField.Equals(value) != true)) {
                    this.ParentCompanyIdField = value;
                    this.RaisePropertyChanged("ParentCompanyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.Property[] Phones {
            get {
                return this.PhonesField;
            }
            set {
                if ((object.ReferenceEquals(this.PhonesField, value) != true)) {
                    this.PhonesField = value;
                    this.RaisePropertyChanged("Phones");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.Property[] Properties {
            get {
                return this.PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertiesField, value) != true)) {
                    this.PropertiesField = value;
                    this.RaisePropertyChanged("Properties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ReplicationId {
            get {
                return this.ReplicationIdField;
            }
            set {
                if ((this.ReplicationIdField.Equals(value) != true)) {
                    this.ReplicationIdField = value;
                    this.RaisePropertyChanged("ReplicationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShortName {
            get {
                return this.ShortNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ShortNameField, value) != true)) {
                    this.ShortNameField = value;
                    this.RaisePropertyChanged("ShortName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.CompanyStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompanyStatus", Namespace="Elviz.API")]
    public enum CompanyStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Active = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Deleted = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RetrievalOptions", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class RetrievalOptions : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExcludeTimeSeriesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExcludeTimeSeries {
            get {
                return this.ExcludeTimeSeriesField;
            }
            set {
                if ((this.ExcludeTimeSeriesField.Equals(value) != true)) {
                    this.ExcludeTimeSeriesField = value;
                    this.RaisePropertyChanged("ExcludeTimeSeries");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransactionDTO", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class TransactionDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuctionTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AuditedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AuthorisedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.BalanceArea BalanceAreaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.Currency BaseCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<ElvizTestUtils.LookUpServiceReference.BookPriceType> BookPriceTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.Company BrokerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double BrokerFeeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.Currency BrokerFeeCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CapFloorPricingResolutionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> CapacityBidQuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CapacityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> CapacityPriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> CapacityTradeQuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CascadingOriginIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] CascadingOriginIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.CashFlowPeriod[] CashFlowPeriodsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CertificateTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.Currency ClearingCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ClearingFeeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.ClearingType ClearingTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CommissionFeeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.Currency CommissionFeeCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.Commodity CommodityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyShortNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ConfirmedByBrokerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ConfirmedByCounterpartyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContractModelTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ContractSplitIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CounterPartyCompanyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CounterPartyCompanyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CounterPartyCompanyShortNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.Portfolio CounterPartyPortfolioField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CounterPartyTraderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CounterpartyTransactionAuthorisedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.Currency CrossCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.Currency CurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.CurrencySource CurrencySourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomCompanyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomCompanyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DealGroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DeclareIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DeliveriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeliveryAreaNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeliveryLocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.DeliveryType DeliveryTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DestinationReferencePriceSeriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DistributedQuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DistributionParentTransactionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EnergySourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double EntryFeeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.Currency EntryFeeCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EnvironmentLabelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ExitFeeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.Currency ExitFeeCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ExpiryDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExpiryOffsetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExternalIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExternalSourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.Fee[] FeesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FlexibleTimeSeriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FromCountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FromDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<ElvizTestUtils.LookUpServiceReference.FutureSettlementType> FutureSettlementTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupField1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupField2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupField3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.PriceSeries HistoricContractPricesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.IndexedPriceBookTemplate IndexFormulaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> InitialPriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InstrumentNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.InstrumentType InstrumentTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.Interconnector InterconnectorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.LoadProfile LoadProfileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> LossFactorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MarketPriceMultiplicatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MasterAgreementNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MaxVolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MinVolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ModificationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double NominationFeeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.Currency NominationFeeCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.VppNomination[] NominationsHourlyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double OriginalQuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool OriginatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PaidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.Portfolio PortfolioField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.PriceBasis PriceBasisField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.PriceBasis PriceBasisToAreaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.PriceVolumeTimeSeriesDetail[] PriceVolumeTimeSeriesDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriceVolumeTimeSeriesTimeZoneNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.PriceVolumeUnit PriceVolumeUnitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.Priority PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductionFacilityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.PropertyGroup[] PropertyGroupsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<ElvizTestUtils.LookUpServiceReference.PeriodKind> PublishedPeriodTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.PutCall PutCallField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.QuantityUnit QuantityUnitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuotaRegionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReferencePriceSeriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReferringIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.TimeResolution ResolutionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RiskValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> SamplingFromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<ElvizTestUtils.LookUpServiceReference.SamplingPeriod> SamplingPeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> SamplingToField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.SettlementRule SettlementRuleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.TransactionStatus StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double StrikeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ThresholdPriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TicketNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.TimeSeries[] TimeSeriesSetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> TimeStampClearedUTCField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> TimeStampConfirmationBrokerUTCField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> TimeStampConfirmationCounterPartyUTCField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TimezoneNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TimezoneOffsetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ToCountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ToDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TradeDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TradeTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TraderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TradingFeeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.Currency TradingFeeCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> TransactionAuthorisedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TransactionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TransferDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.TransactionType TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<ElvizTestUtils.LookUpServiceReference.DeliveryType> UnderlyingDeliveryTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.ExecutionVenue UnderlyingExecutionVenueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.InstrumentType UnderlyingInstrumentTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserSpecifiedNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.ExecutionVenue VenueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.VersionInfo VersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VolumeReferenceExternalIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuctionType {
            get {
                return this.AuctionTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.AuctionTypeField, value) != true)) {
                    this.AuctionTypeField = value;
                    this.RaisePropertyChanged("AuctionType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Audited {
            get {
                return this.AuditedField;
            }
            set {
                if ((this.AuditedField.Equals(value) != true)) {
                    this.AuditedField = value;
                    this.RaisePropertyChanged("Audited");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Authorised {
            get {
                return this.AuthorisedField;
            }
            set {
                if ((this.AuthorisedField.Equals(value) != true)) {
                    this.AuthorisedField = value;
                    this.RaisePropertyChanged("Authorised");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.BalanceArea BalanceArea {
            get {
                return this.BalanceAreaField;
            }
            set {
                if ((object.ReferenceEquals(this.BalanceAreaField, value) != true)) {
                    this.BalanceAreaField = value;
                    this.RaisePropertyChanged("BalanceArea");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.Currency BaseCurrency {
            get {
                return this.BaseCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.BaseCurrencyField, value) != true)) {
                    this.BaseCurrencyField = value;
                    this.RaisePropertyChanged("BaseCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ElvizTestUtils.LookUpServiceReference.BookPriceType> BookPriceType {
            get {
                return this.BookPriceTypeField;
            }
            set {
                if ((this.BookPriceTypeField.Equals(value) != true)) {
                    this.BookPriceTypeField = value;
                    this.RaisePropertyChanged("BookPriceType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.Company Broker {
            get {
                return this.BrokerField;
            }
            set {
                if ((object.ReferenceEquals(this.BrokerField, value) != true)) {
                    this.BrokerField = value;
                    this.RaisePropertyChanged("Broker");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BrokerFee {
            get {
                return this.BrokerFeeField;
            }
            set {
                if ((this.BrokerFeeField.Equals(value) != true)) {
                    this.BrokerFeeField = value;
                    this.RaisePropertyChanged("BrokerFee");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.Currency BrokerFeeCurrency {
            get {
                return this.BrokerFeeCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.BrokerFeeCurrencyField, value) != true)) {
                    this.BrokerFeeCurrencyField = value;
                    this.RaisePropertyChanged("BrokerFeeCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CapFloorPricingResolution {
            get {
                return this.CapFloorPricingResolutionField;
            }
            set {
                if ((object.ReferenceEquals(this.CapFloorPricingResolutionField, value) != true)) {
                    this.CapFloorPricingResolutionField = value;
                    this.RaisePropertyChanged("CapFloorPricingResolution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> CapacityBidQuantity {
            get {
                return this.CapacityBidQuantityField;
            }
            set {
                if ((this.CapacityBidQuantityField.Equals(value) != true)) {
                    this.CapacityBidQuantityField = value;
                    this.RaisePropertyChanged("CapacityBidQuantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CapacityId {
            get {
                return this.CapacityIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CapacityIdField, value) != true)) {
                    this.CapacityIdField = value;
                    this.RaisePropertyChanged("CapacityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> CapacityPrice {
            get {
                return this.CapacityPriceField;
            }
            set {
                if ((this.CapacityPriceField.Equals(value) != true)) {
                    this.CapacityPriceField = value;
                    this.RaisePropertyChanged("CapacityPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> CapacityTradeQuantity {
            get {
                return this.CapacityTradeQuantityField;
            }
            set {
                if ((this.CapacityTradeQuantityField.Equals(value) != true)) {
                    this.CapacityTradeQuantityField = value;
                    this.RaisePropertyChanged("CapacityTradeQuantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CascadingOriginId {
            get {
                return this.CascadingOriginIdField;
            }
            set {
                if ((this.CascadingOriginIdField.Equals(value) != true)) {
                    this.CascadingOriginIdField = value;
                    this.RaisePropertyChanged("CascadingOriginId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] CascadingOriginIds {
            get {
                return this.CascadingOriginIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.CascadingOriginIdsField, value) != true)) {
                    this.CascadingOriginIdsField = value;
                    this.RaisePropertyChanged("CascadingOriginIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.CashFlowPeriod[] CashFlowPeriods {
            get {
                return this.CashFlowPeriodsField;
            }
            set {
                if ((object.ReferenceEquals(this.CashFlowPeriodsField, value) != true)) {
                    this.CashFlowPeriodsField = value;
                    this.RaisePropertyChanged("CashFlowPeriods");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CertificateType {
            get {
                return this.CertificateTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.CertificateTypeField, value) != true)) {
                    this.CertificateTypeField = value;
                    this.RaisePropertyChanged("CertificateType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.Currency ClearingCurrency {
            get {
                return this.ClearingCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.ClearingCurrencyField, value) != true)) {
                    this.ClearingCurrencyField = value;
                    this.RaisePropertyChanged("ClearingCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ClearingFee {
            get {
                return this.ClearingFeeField;
            }
            set {
                if ((this.ClearingFeeField.Equals(value) != true)) {
                    this.ClearingFeeField = value;
                    this.RaisePropertyChanged("ClearingFee");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.ClearingType ClearingType {
            get {
                return this.ClearingTypeField;
            }
            set {
                if ((this.ClearingTypeField.Equals(value) != true)) {
                    this.ClearingTypeField = value;
                    this.RaisePropertyChanged("ClearingType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CommissionFee {
            get {
                return this.CommissionFeeField;
            }
            set {
                if ((this.CommissionFeeField.Equals(value) != true)) {
                    this.CommissionFeeField = value;
                    this.RaisePropertyChanged("CommissionFee");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.Currency CommissionFeeCurrency {
            get {
                return this.CommissionFeeCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.CommissionFeeCurrencyField, value) != true)) {
                    this.CommissionFeeCurrencyField = value;
                    this.RaisePropertyChanged("CommissionFeeCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.Commodity Commodity {
            get {
                return this.CommodityField;
            }
            set {
                if ((object.ReferenceEquals(this.CommodityField, value) != true)) {
                    this.CommodityField = value;
                    this.RaisePropertyChanged("Commodity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyId {
            get {
                return this.CompanyIdField;
            }
            set {
                if ((this.CompanyIdField.Equals(value) != true)) {
                    this.CompanyIdField = value;
                    this.RaisePropertyChanged("CompanyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyShortName {
            get {
                return this.CompanyShortNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyShortNameField, value) != true)) {
                    this.CompanyShortNameField = value;
                    this.RaisePropertyChanged("CompanyShortName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ConfirmedByBroker {
            get {
                return this.ConfirmedByBrokerField;
            }
            set {
                if ((this.ConfirmedByBrokerField.Equals(value) != true)) {
                    this.ConfirmedByBrokerField = value;
                    this.RaisePropertyChanged("ConfirmedByBroker");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ConfirmedByCounterparty {
            get {
                return this.ConfirmedByCounterpartyField;
            }
            set {
                if ((this.ConfirmedByCounterpartyField.Equals(value) != true)) {
                    this.ConfirmedByCounterpartyField = value;
                    this.RaisePropertyChanged("ConfirmedByCounterparty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContractModelType {
            get {
                return this.ContractModelTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ContractModelTypeField, value) != true)) {
                    this.ContractModelTypeField = value;
                    this.RaisePropertyChanged("ContractModelType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ContractSplitId {
            get {
                return this.ContractSplitIdField;
            }
            set {
                if ((this.ContractSplitIdField.Equals(value) != true)) {
                    this.ContractSplitIdField = value;
                    this.RaisePropertyChanged("ContractSplitId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CounterPartyCompanyId {
            get {
                return this.CounterPartyCompanyIdField;
            }
            set {
                if ((this.CounterPartyCompanyIdField.Equals(value) != true)) {
                    this.CounterPartyCompanyIdField = value;
                    this.RaisePropertyChanged("CounterPartyCompanyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CounterPartyCompanyName {
            get {
                return this.CounterPartyCompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CounterPartyCompanyNameField, value) != true)) {
                    this.CounterPartyCompanyNameField = value;
                    this.RaisePropertyChanged("CounterPartyCompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CounterPartyCompanyShortName {
            get {
                return this.CounterPartyCompanyShortNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CounterPartyCompanyShortNameField, value) != true)) {
                    this.CounterPartyCompanyShortNameField = value;
                    this.RaisePropertyChanged("CounterPartyCompanyShortName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.Portfolio CounterPartyPortfolio {
            get {
                return this.CounterPartyPortfolioField;
            }
            set {
                if ((object.ReferenceEquals(this.CounterPartyPortfolioField, value) != true)) {
                    this.CounterPartyPortfolioField = value;
                    this.RaisePropertyChanged("CounterPartyPortfolio");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CounterPartyTrader {
            get {
                return this.CounterPartyTraderField;
            }
            set {
                if ((object.ReferenceEquals(this.CounterPartyTraderField, value) != true)) {
                    this.CounterPartyTraderField = value;
                    this.RaisePropertyChanged("CounterPartyTrader");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CounterpartyTransactionAuthorised {
            get {
                return this.CounterpartyTransactionAuthorisedField;
            }
            set {
                if ((this.CounterpartyTransactionAuthorisedField.Equals(value) != true)) {
                    this.CounterpartyTransactionAuthorisedField = value;
                    this.RaisePropertyChanged("CounterpartyTransactionAuthorised");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.Currency CrossCurrency {
            get {
                return this.CrossCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.CrossCurrencyField, value) != true)) {
                    this.CrossCurrencyField = value;
                    this.RaisePropertyChanged("CrossCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.Currency Currency {
            get {
                return this.CurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrencyField, value) != true)) {
                    this.CurrencyField = value;
                    this.RaisePropertyChanged("Currency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.CurrencySource CurrencySource {
            get {
                return this.CurrencySourceField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrencySourceField, value) != true)) {
                    this.CurrencySourceField = value;
                    this.RaisePropertyChanged("CurrencySource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomCompanyId {
            get {
                return this.CustomCompanyIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomCompanyIdField, value) != true)) {
                    this.CustomCompanyIdField = value;
                    this.RaisePropertyChanged("CustomCompanyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomCompanyName {
            get {
                return this.CustomCompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomCompanyNameField, value) != true)) {
                    this.CustomCompanyNameField = value;
                    this.RaisePropertyChanged("CustomCompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DealGroup {
            get {
                return this.DealGroupField;
            }
            set {
                if ((object.ReferenceEquals(this.DealGroupField, value) != true)) {
                    this.DealGroupField = value;
                    this.RaisePropertyChanged("DealGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DeclareId {
            get {
                return this.DeclareIdField;
            }
            set {
                if ((this.DeclareIdField.Equals(value) != true)) {
                    this.DeclareIdField = value;
                    this.RaisePropertyChanged("DeclareId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Deliveries {
            get {
                return this.DeliveriesField;
            }
            set {
                if ((this.DeliveriesField.Equals(value) != true)) {
                    this.DeliveriesField = value;
                    this.RaisePropertyChanged("Deliveries");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeliveryAreaName {
            get {
                return this.DeliveryAreaNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DeliveryAreaNameField, value) != true)) {
                    this.DeliveryAreaNameField = value;
                    this.RaisePropertyChanged("DeliveryAreaName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeliveryLocation {
            get {
                return this.DeliveryLocationField;
            }
            set {
                if ((object.ReferenceEquals(this.DeliveryLocationField, value) != true)) {
                    this.DeliveryLocationField = value;
                    this.RaisePropertyChanged("DeliveryLocation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.DeliveryType DeliveryType {
            get {
                return this.DeliveryTypeField;
            }
            set {
                if ((this.DeliveryTypeField.Equals(value) != true)) {
                    this.DeliveryTypeField = value;
                    this.RaisePropertyChanged("DeliveryType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DestinationReferencePriceSeries {
            get {
                return this.DestinationReferencePriceSeriesField;
            }
            set {
                if ((object.ReferenceEquals(this.DestinationReferencePriceSeriesField, value) != true)) {
                    this.DestinationReferencePriceSeriesField = value;
                    this.RaisePropertyChanged("DestinationReferencePriceSeries");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double DistributedQuantity {
            get {
                return this.DistributedQuantityField;
            }
            set {
                if ((this.DistributedQuantityField.Equals(value) != true)) {
                    this.DistributedQuantityField = value;
                    this.RaisePropertyChanged("DistributedQuantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DistributionParentTransactionId {
            get {
                return this.DistributionParentTransactionIdField;
            }
            set {
                if ((this.DistributionParentTransactionIdField.Equals(value) != true)) {
                    this.DistributionParentTransactionIdField = value;
                    this.RaisePropertyChanged("DistributionParentTransactionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EnergySource {
            get {
                return this.EnergySourceField;
            }
            set {
                if ((object.ReferenceEquals(this.EnergySourceField, value) != true)) {
                    this.EnergySourceField = value;
                    this.RaisePropertyChanged("EnergySource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double EntryFee {
            get {
                return this.EntryFeeField;
            }
            set {
                if ((this.EntryFeeField.Equals(value) != true)) {
                    this.EntryFeeField = value;
                    this.RaisePropertyChanged("EntryFee");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.Currency EntryFeeCurrency {
            get {
                return this.EntryFeeCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.EntryFeeCurrencyField, value) != true)) {
                    this.EntryFeeCurrencyField = value;
                    this.RaisePropertyChanged("EntryFeeCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EnvironmentLabel {
            get {
                return this.EnvironmentLabelField;
            }
            set {
                if ((object.ReferenceEquals(this.EnvironmentLabelField, value) != true)) {
                    this.EnvironmentLabelField = value;
                    this.RaisePropertyChanged("EnvironmentLabel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ExitFee {
            get {
                return this.ExitFeeField;
            }
            set {
                if ((this.ExitFeeField.Equals(value) != true)) {
                    this.ExitFeeField = value;
                    this.RaisePropertyChanged("ExitFee");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.Currency ExitFeeCurrency {
            get {
                return this.ExitFeeCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.ExitFeeCurrencyField, value) != true)) {
                    this.ExitFeeCurrencyField = value;
                    this.RaisePropertyChanged("ExitFeeCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ExpiryDate {
            get {
                return this.ExpiryDateField;
            }
            set {
                if ((this.ExpiryDateField.Equals(value) != true)) {
                    this.ExpiryDateField = value;
                    this.RaisePropertyChanged("ExpiryDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExpiryOffset {
            get {
                return this.ExpiryOffsetField;
            }
            set {
                if ((this.ExpiryOffsetField.Equals(value) != true)) {
                    this.ExpiryOffsetField = value;
                    this.RaisePropertyChanged("ExpiryOffset");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExternalId {
            get {
                return this.ExternalIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ExternalIdField, value) != true)) {
                    this.ExternalIdField = value;
                    this.RaisePropertyChanged("ExternalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExternalSource {
            get {
                return this.ExternalSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.ExternalSourceField, value) != true)) {
                    this.ExternalSourceField = value;
                    this.RaisePropertyChanged("ExternalSource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.Fee[] Fees {
            get {
                return this.FeesField;
            }
            set {
                if ((object.ReferenceEquals(this.FeesField, value) != true)) {
                    this.FeesField = value;
                    this.RaisePropertyChanged("Fees");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool FlexibleTimeSeries {
            get {
                return this.FlexibleTimeSeriesField;
            }
            set {
                if ((this.FlexibleTimeSeriesField.Equals(value) != true)) {
                    this.FlexibleTimeSeriesField = value;
                    this.RaisePropertyChanged("FlexibleTimeSeries");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FromCountry {
            get {
                return this.FromCountryField;
            }
            set {
                if ((object.ReferenceEquals(this.FromCountryField, value) != true)) {
                    this.FromCountryField = value;
                    this.RaisePropertyChanged("FromCountry");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FromDate {
            get {
                return this.FromDateField;
            }
            set {
                if ((this.FromDateField.Equals(value) != true)) {
                    this.FromDateField = value;
                    this.RaisePropertyChanged("FromDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ElvizTestUtils.LookUpServiceReference.FutureSettlementType> FutureSettlementType {
            get {
                return this.FutureSettlementTypeField;
            }
            set {
                if ((this.FutureSettlementTypeField.Equals(value) != true)) {
                    this.FutureSettlementTypeField = value;
                    this.RaisePropertyChanged("FutureSettlementType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupField1 {
            get {
                return this.GroupField1Field;
            }
            set {
                if ((object.ReferenceEquals(this.GroupField1Field, value) != true)) {
                    this.GroupField1Field = value;
                    this.RaisePropertyChanged("GroupField1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupField2 {
            get {
                return this.GroupField2Field;
            }
            set {
                if ((object.ReferenceEquals(this.GroupField2Field, value) != true)) {
                    this.GroupField2Field = value;
                    this.RaisePropertyChanged("GroupField2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupField3 {
            get {
                return this.GroupField3Field;
            }
            set {
                if ((object.ReferenceEquals(this.GroupField3Field, value) != true)) {
                    this.GroupField3Field = value;
                    this.RaisePropertyChanged("GroupField3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.PriceSeries HistoricContractPrices {
            get {
                return this.HistoricContractPricesField;
            }
            set {
                if ((object.ReferenceEquals(this.HistoricContractPricesField, value) != true)) {
                    this.HistoricContractPricesField = value;
                    this.RaisePropertyChanged("HistoricContractPrices");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.IndexedPriceBookTemplate IndexFormula {
            get {
                return this.IndexFormulaField;
            }
            set {
                if ((object.ReferenceEquals(this.IndexFormulaField, value) != true)) {
                    this.IndexFormulaField = value;
                    this.RaisePropertyChanged("IndexFormula");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> InitialPrice {
            get {
                return this.InitialPriceField;
            }
            set {
                if ((this.InitialPriceField.Equals(value) != true)) {
                    this.InitialPriceField = value;
                    this.RaisePropertyChanged("InitialPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstrumentName {
            get {
                return this.InstrumentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.InstrumentNameField, value) != true)) {
                    this.InstrumentNameField = value;
                    this.RaisePropertyChanged("InstrumentName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.InstrumentType InstrumentType {
            get {
                return this.InstrumentTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.InstrumentTypeField, value) != true)) {
                    this.InstrumentTypeField = value;
                    this.RaisePropertyChanged("InstrumentType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.Interconnector Interconnector {
            get {
                return this.InterconnectorField;
            }
            set {
                if ((object.ReferenceEquals(this.InterconnectorField, value) != true)) {
                    this.InterconnectorField = value;
                    this.RaisePropertyChanged("Interconnector");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.LoadProfile LoadProfile {
            get {
                return this.LoadProfileField;
            }
            set {
                if ((object.ReferenceEquals(this.LoadProfileField, value) != true)) {
                    this.LoadProfileField = value;
                    this.RaisePropertyChanged("LoadProfile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> LossFactor {
            get {
                return this.LossFactorField;
            }
            set {
                if ((this.LossFactorField.Equals(value) != true)) {
                    this.LossFactorField = value;
                    this.RaisePropertyChanged("LossFactor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MarketPriceMultiplicator {
            get {
                return this.MarketPriceMultiplicatorField;
            }
            set {
                if ((this.MarketPriceMultiplicatorField.Equals(value) != true)) {
                    this.MarketPriceMultiplicatorField = value;
                    this.RaisePropertyChanged("MarketPriceMultiplicator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MasterAgreementName {
            get {
                return this.MasterAgreementNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MasterAgreementNameField, value) != true)) {
                    this.MasterAgreementNameField = value;
                    this.RaisePropertyChanged("MasterAgreementName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaxVol {
            get {
                return this.MaxVolField;
            }
            set {
                if ((this.MaxVolField.Equals(value) != true)) {
                    this.MaxVolField = value;
                    this.RaisePropertyChanged("MaxVol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MinVol {
            get {
                return this.MinVolField;
            }
            set {
                if ((this.MinVolField.Equals(value) != true)) {
                    this.MinVolField = value;
                    this.RaisePropertyChanged("MinVol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ModificationDate {
            get {
                return this.ModificationDateField;
            }
            set {
                if ((this.ModificationDateField.Equals(value) != true)) {
                    this.ModificationDateField = value;
                    this.RaisePropertyChanged("ModificationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double NominationFee {
            get {
                return this.NominationFeeField;
            }
            set {
                if ((this.NominationFeeField.Equals(value) != true)) {
                    this.NominationFeeField = value;
                    this.RaisePropertyChanged("NominationFee");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.Currency NominationFeeCurrency {
            get {
                return this.NominationFeeCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.NominationFeeCurrencyField, value) != true)) {
                    this.NominationFeeCurrencyField = value;
                    this.RaisePropertyChanged("NominationFeeCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.VppNomination[] NominationsHourly {
            get {
                return this.NominationsHourlyField;
            }
            set {
                if ((object.ReferenceEquals(this.NominationsHourlyField, value) != true)) {
                    this.NominationsHourlyField = value;
                    this.RaisePropertyChanged("NominationsHourly");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double OriginalQuantity {
            get {
                return this.OriginalQuantityField;
            }
            set {
                if ((this.OriginalQuantityField.Equals(value) != true)) {
                    this.OriginalQuantityField = value;
                    this.RaisePropertyChanged("OriginalQuantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Originator {
            get {
                return this.OriginatorField;
            }
            set {
                if ((this.OriginatorField.Equals(value) != true)) {
                    this.OriginatorField = value;
                    this.RaisePropertyChanged("Originator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Paid {
            get {
                return this.PaidField;
            }
            set {
                if ((this.PaidField.Equals(value) != true)) {
                    this.PaidField = value;
                    this.RaisePropertyChanged("Paid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.Portfolio Portfolio {
            get {
                return this.PortfolioField;
            }
            set {
                if ((object.ReferenceEquals(this.PortfolioField, value) != true)) {
                    this.PortfolioField = value;
                    this.RaisePropertyChanged("Portfolio");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.PriceBasis PriceBasis {
            get {
                return this.PriceBasisField;
            }
            set {
                if ((object.ReferenceEquals(this.PriceBasisField, value) != true)) {
                    this.PriceBasisField = value;
                    this.RaisePropertyChanged("PriceBasis");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.PriceBasis PriceBasisToArea {
            get {
                return this.PriceBasisToAreaField;
            }
            set {
                if ((object.ReferenceEquals(this.PriceBasisToAreaField, value) != true)) {
                    this.PriceBasisToAreaField = value;
                    this.RaisePropertyChanged("PriceBasisToArea");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.PriceVolumeTimeSeriesDetail[] PriceVolumeTimeSeriesDetails {
            get {
                return this.PriceVolumeTimeSeriesDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.PriceVolumeTimeSeriesDetailsField, value) != true)) {
                    this.PriceVolumeTimeSeriesDetailsField = value;
                    this.RaisePropertyChanged("PriceVolumeTimeSeriesDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PriceVolumeTimeSeriesTimeZoneName {
            get {
                return this.PriceVolumeTimeSeriesTimeZoneNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PriceVolumeTimeSeriesTimeZoneNameField, value) != true)) {
                    this.PriceVolumeTimeSeriesTimeZoneNameField = value;
                    this.RaisePropertyChanged("PriceVolumeTimeSeriesTimeZoneName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.PriceVolumeUnit PriceVolumeUnit {
            get {
                return this.PriceVolumeUnitField;
            }
            set {
                if ((this.PriceVolumeUnitField.Equals(value) != true)) {
                    this.PriceVolumeUnitField = value;
                    this.RaisePropertyChanged("PriceVolumeUnit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.Priority Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductionFacility {
            get {
                return this.ProductionFacilityField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductionFacilityField, value) != true)) {
                    this.ProductionFacilityField = value;
                    this.RaisePropertyChanged("ProductionFacility");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.PropertyGroup[] PropertyGroups {
            get {
                return this.PropertyGroupsField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyGroupsField, value) != true)) {
                    this.PropertyGroupsField = value;
                    this.RaisePropertyChanged("PropertyGroups");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ElvizTestUtils.LookUpServiceReference.PeriodKind> PublishedPeriodType {
            get {
                return this.PublishedPeriodTypeField;
            }
            set {
                if ((this.PublishedPeriodTypeField.Equals(value) != true)) {
                    this.PublishedPeriodTypeField = value;
                    this.RaisePropertyChanged("PublishedPeriodType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.PutCall PutCall {
            get {
                return this.PutCallField;
            }
            set {
                if ((this.PutCallField.Equals(value) != true)) {
                    this.PutCallField = value;
                    this.RaisePropertyChanged("PutCall");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.QuantityUnit QuantityUnit {
            get {
                return this.QuantityUnitField;
            }
            set {
                if ((this.QuantityUnitField.Equals(value) != true)) {
                    this.QuantityUnitField = value;
                    this.RaisePropertyChanged("QuantityUnit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuotaRegion {
            get {
                return this.QuotaRegionField;
            }
            set {
                if ((object.ReferenceEquals(this.QuotaRegionField, value) != true)) {
                    this.QuotaRegionField = value;
                    this.RaisePropertyChanged("QuotaRegion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReferencePriceSeries {
            get {
                return this.ReferencePriceSeriesField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferencePriceSeriesField, value) != true)) {
                    this.ReferencePriceSeriesField = value;
                    this.RaisePropertyChanged("ReferencePriceSeries");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReferringId {
            get {
                return this.ReferringIdField;
            }
            set {
                if ((this.ReferringIdField.Equals(value) != true)) {
                    this.ReferringIdField = value;
                    this.RaisePropertyChanged("ReferringId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.TimeResolution Resolution {
            get {
                return this.ResolutionField;
            }
            set {
                if ((this.ResolutionField.Equals(value) != true)) {
                    this.ResolutionField = value;
                    this.RaisePropertyChanged("Resolution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RiskValue {
            get {
                return this.RiskValueField;
            }
            set {
                if ((this.RiskValueField.Equals(value) != true)) {
                    this.RiskValueField = value;
                    this.RaisePropertyChanged("RiskValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> SamplingFrom {
            get {
                return this.SamplingFromField;
            }
            set {
                if ((this.SamplingFromField.Equals(value) != true)) {
                    this.SamplingFromField = value;
                    this.RaisePropertyChanged("SamplingFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ElvizTestUtils.LookUpServiceReference.SamplingPeriod> SamplingPeriod {
            get {
                return this.SamplingPeriodField;
            }
            set {
                if ((this.SamplingPeriodField.Equals(value) != true)) {
                    this.SamplingPeriodField = value;
                    this.RaisePropertyChanged("SamplingPeriod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> SamplingTo {
            get {
                return this.SamplingToField;
            }
            set {
                if ((this.SamplingToField.Equals(value) != true)) {
                    this.SamplingToField = value;
                    this.RaisePropertyChanged("SamplingTo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.SettlementRule SettlementRule {
            get {
                return this.SettlementRuleField;
            }
            set {
                if ((object.ReferenceEquals(this.SettlementRuleField, value) != true)) {
                    this.SettlementRuleField = value;
                    this.RaisePropertyChanged("SettlementRule");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.TransactionStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Strike {
            get {
                return this.StrikeField;
            }
            set {
                if ((this.StrikeField.Equals(value) != true)) {
                    this.StrikeField = value;
                    this.RaisePropertyChanged("Strike");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ThresholdPrice {
            get {
                return this.ThresholdPriceField;
            }
            set {
                if ((this.ThresholdPriceField.Equals(value) != true)) {
                    this.ThresholdPriceField = value;
                    this.RaisePropertyChanged("ThresholdPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TicketNumber {
            get {
                return this.TicketNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.TicketNumberField, value) != true)) {
                    this.TicketNumberField = value;
                    this.RaisePropertyChanged("TicketNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.TimeSeries[] TimeSeriesSet {
            get {
                return this.TimeSeriesSetField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeSeriesSetField, value) != true)) {
                    this.TimeSeriesSetField = value;
                    this.RaisePropertyChanged("TimeSeriesSet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> TimeStampClearedUTC {
            get {
                return this.TimeStampClearedUTCField;
            }
            set {
                if ((this.TimeStampClearedUTCField.Equals(value) != true)) {
                    this.TimeStampClearedUTCField = value;
                    this.RaisePropertyChanged("TimeStampClearedUTC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> TimeStampConfirmationBrokerUTC {
            get {
                return this.TimeStampConfirmationBrokerUTCField;
            }
            set {
                if ((this.TimeStampConfirmationBrokerUTCField.Equals(value) != true)) {
                    this.TimeStampConfirmationBrokerUTCField = value;
                    this.RaisePropertyChanged("TimeStampConfirmationBrokerUTC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> TimeStampConfirmationCounterPartyUTC {
            get {
                return this.TimeStampConfirmationCounterPartyUTCField;
            }
            set {
                if ((this.TimeStampConfirmationCounterPartyUTCField.Equals(value) != true)) {
                    this.TimeStampConfirmationCounterPartyUTCField = value;
                    this.RaisePropertyChanged("TimeStampConfirmationCounterPartyUTC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TimezoneName {
            get {
                return this.TimezoneNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TimezoneNameField, value) != true)) {
                    this.TimezoneNameField = value;
                    this.RaisePropertyChanged("TimezoneName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TimezoneOffset {
            get {
                return this.TimezoneOffsetField;
            }
            set {
                if ((this.TimezoneOffsetField.Equals(value) != true)) {
                    this.TimezoneOffsetField = value;
                    this.RaisePropertyChanged("TimezoneOffset");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ToCountry {
            get {
                return this.ToCountryField;
            }
            set {
                if ((object.ReferenceEquals(this.ToCountryField, value) != true)) {
                    this.ToCountryField = value;
                    this.RaisePropertyChanged("ToCountry");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ToDate {
            get {
                return this.ToDateField;
            }
            set {
                if ((this.ToDateField.Equals(value) != true)) {
                    this.ToDateField = value;
                    this.RaisePropertyChanged("ToDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TradeDate {
            get {
                return this.TradeDateField;
            }
            set {
                if ((this.TradeDateField.Equals(value) != true)) {
                    this.TradeDateField = value;
                    this.RaisePropertyChanged("TradeDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TradeTime {
            get {
                return this.TradeTimeField;
            }
            set {
                if ((this.TradeTimeField.Equals(value) != true)) {
                    this.TradeTimeField = value;
                    this.RaisePropertyChanged("TradeTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Trader {
            get {
                return this.TraderField;
            }
            set {
                if ((object.ReferenceEquals(this.TraderField, value) != true)) {
                    this.TraderField = value;
                    this.RaisePropertyChanged("Trader");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TradingFee {
            get {
                return this.TradingFeeField;
            }
            set {
                if ((this.TradingFeeField.Equals(value) != true)) {
                    this.TradingFeeField = value;
                    this.RaisePropertyChanged("TradingFee");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.Currency TradingFeeCurrency {
            get {
                return this.TradingFeeCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.TradingFeeCurrencyField, value) != true)) {
                    this.TradingFeeCurrencyField = value;
                    this.RaisePropertyChanged("TradingFeeCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> TransactionAuthorised {
            get {
                return this.TransactionAuthorisedField;
            }
            set {
                if ((this.TransactionAuthorisedField.Equals(value) != true)) {
                    this.TransactionAuthorisedField = value;
                    this.RaisePropertyChanged("TransactionAuthorised");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TransactionId {
            get {
                return this.TransactionIdField;
            }
            set {
                if ((this.TransactionIdField.Equals(value) != true)) {
                    this.TransactionIdField = value;
                    this.RaisePropertyChanged("TransactionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TransferDate {
            get {
                return this.TransferDateField;
            }
            set {
                if ((this.TransferDateField.Equals(value) != true)) {
                    this.TransferDateField = value;
                    this.RaisePropertyChanged("TransferDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.TransactionType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ElvizTestUtils.LookUpServiceReference.DeliveryType> UnderlyingDeliveryType {
            get {
                return this.UnderlyingDeliveryTypeField;
            }
            set {
                if ((this.UnderlyingDeliveryTypeField.Equals(value) != true)) {
                    this.UnderlyingDeliveryTypeField = value;
                    this.RaisePropertyChanged("UnderlyingDeliveryType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.ExecutionVenue UnderlyingExecutionVenue {
            get {
                return this.UnderlyingExecutionVenueField;
            }
            set {
                if ((object.ReferenceEquals(this.UnderlyingExecutionVenueField, value) != true)) {
                    this.UnderlyingExecutionVenueField = value;
                    this.RaisePropertyChanged("UnderlyingExecutionVenue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.InstrumentType UnderlyingInstrumentType {
            get {
                return this.UnderlyingInstrumentTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.UnderlyingInstrumentTypeField, value) != true)) {
                    this.UnderlyingInstrumentTypeField = value;
                    this.RaisePropertyChanged("UnderlyingInstrumentType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserSpecifiedName {
            get {
                return this.UserSpecifiedNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserSpecifiedNameField, value) != true)) {
                    this.UserSpecifiedNameField = value;
                    this.RaisePropertyChanged("UserSpecifiedName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.ExecutionVenue Venue {
            get {
                return this.VenueField;
            }
            set {
                if ((object.ReferenceEquals(this.VenueField, value) != true)) {
                    this.VenueField = value;
                    this.RaisePropertyChanged("Venue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.VersionInfo Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VolumeReferenceExternalId {
            get {
                return this.VolumeReferenceExternalIdField;
            }
            set {
                if ((object.ReferenceEquals(this.VolumeReferenceExternalIdField, value) != true)) {
                    this.VolumeReferenceExternalIdField = value;
                    this.RaisePropertyChanged("VolumeReferenceExternalId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BalanceArea", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class BalanceArea : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EICCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EICCode {
            get {
                return this.EICCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.EICCodeField, value) != true)) {
                    this.EICCodeField = value;
                    this.RaisePropertyChanged("EICCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Currency", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class Currency : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CurrencyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ISOCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CurrencyId {
            get {
                return this.CurrencyIdField;
            }
            set {
                if ((this.CurrencyIdField.Equals(value) != true)) {
                    this.CurrencyIdField = value;
                    this.RaisePropertyChanged("CurrencyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ISOCode {
            get {
                return this.ISOCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ISOCodeField, value) != true)) {
                    this.ISOCodeField = value;
                    this.RaisePropertyChanged("ISOCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Commodity", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class Commodity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CurrencySource", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class CurrencySource : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CurrencySourceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CurrencySourceId {
            get {
                return this.CurrencySourceIdField;
            }
            set {
                if ((this.CurrencySourceIdField.Equals(value) != true)) {
                    this.CurrencySourceIdField = value;
                    this.RaisePropertyChanged("CurrencySourceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PriceSeries", Namespace="http://schemas.datacontract.org/2004/07/Viz.Integration.Core.Contract.Model")]
    [System.SerializableAttribute()]
    public partial class PriceSeries : ElvizTestUtils.LookUpServiceReference.AbstractPriceSeries {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IndexedPriceBookTemplate", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class IndexedPriceBookTemplate : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.Commodity CommodityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.Commodity Commodity {
            get {
                return this.CommodityField;
            }
            set {
                if ((object.ReferenceEquals(this.CommodityField, value) != true)) {
                    this.CommodityField = value;
                    this.RaisePropertyChanged("Commodity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InstrumentType", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class InstrumentType : ElvizTestUtils.LookUpServiceReference.DomainObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Interconnector", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class Interconnector : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.BalanceArea DestinationAreaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LossFactorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.BalanceArea OriginAreaField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.BalanceArea DestinationArea {
            get {
                return this.DestinationAreaField;
            }
            set {
                if ((object.ReferenceEquals(this.DestinationAreaField, value) != true)) {
                    this.DestinationAreaField = value;
                    this.RaisePropertyChanged("DestinationArea");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LossFactor {
            get {
                return this.LossFactorField;
            }
            set {
                if ((this.LossFactorField.Equals(value) != true)) {
                    this.LossFactorField = value;
                    this.RaisePropertyChanged("LossFactor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.BalanceArea OriginArea {
            get {
                return this.OriginAreaField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginAreaField, value) != true)) {
                    this.OriginAreaField = value;
                    this.RaisePropertyChanged("OriginArea");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoadProfile", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class LoadProfile : ElvizTestUtils.LookUpServiceReference.DomainObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<ElvizTestUtils.LookUpServiceReference.CustomLoadType> CustomProfileTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.LoadProfileEmptyDaysMode EmptyDaysModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool[] HolidayProfileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.LoadProfileHolidayTreatment HolidayTreatmentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.LoadProfileHourSelectMode HourSelectModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<ElvizTestUtils.LookUpServiceReference.SystemLoadType> SystemProfileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool[] WeekDayProfileField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ElvizTestUtils.LookUpServiceReference.CustomLoadType> CustomProfileType {
            get {
                return this.CustomProfileTypeField;
            }
            set {
                if ((this.CustomProfileTypeField.Equals(value) != true)) {
                    this.CustomProfileTypeField = value;
                    this.RaisePropertyChanged("CustomProfileType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.LoadProfileEmptyDaysMode EmptyDaysMode {
            get {
                return this.EmptyDaysModeField;
            }
            set {
                if ((this.EmptyDaysModeField.Equals(value) != true)) {
                    this.EmptyDaysModeField = value;
                    this.RaisePropertyChanged("EmptyDaysMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool[] HolidayProfile {
            get {
                return this.HolidayProfileField;
            }
            set {
                if ((object.ReferenceEquals(this.HolidayProfileField, value) != true)) {
                    this.HolidayProfileField = value;
                    this.RaisePropertyChanged("HolidayProfile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.LoadProfileHolidayTreatment HolidayTreatment {
            get {
                return this.HolidayTreatmentField;
            }
            set {
                if ((this.HolidayTreatmentField.Equals(value) != true)) {
                    this.HolidayTreatmentField = value;
                    this.RaisePropertyChanged("HolidayTreatment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.LoadProfileHourSelectMode HourSelectMode {
            get {
                return this.HourSelectModeField;
            }
            set {
                if ((this.HourSelectModeField.Equals(value) != true)) {
                    this.HourSelectModeField = value;
                    this.RaisePropertyChanged("HourSelectMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ElvizTestUtils.LookUpServiceReference.SystemLoadType> SystemProfile {
            get {
                return this.SystemProfileField;
            }
            set {
                if ((this.SystemProfileField.Equals(value) != true)) {
                    this.SystemProfileField = value;
                    this.RaisePropertyChanged("SystemProfile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool[] WeekDayProfile {
            get {
                return this.WeekDayProfileField;
            }
            set {
                if ((object.ReferenceEquals(this.WeekDayProfileField, value) != true)) {
                    this.WeekDayProfileField = value;
                    this.RaisePropertyChanged("WeekDayProfile");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PriceBasis", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class PriceBasis : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BenchNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.HolidayCalendar CalendarField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.Commodity CommodityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasHourlyHistoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsGridPointField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PeakProfileIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<ElvizTestUtils.LookUpServiceReference.PriceVolumeUnit> PriceUnitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<ElvizTestUtils.LookUpServiceReference.QuantityUnit> QuantityUnitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SettlementAreaIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SettlementAreaNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SuperPeakProfileIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WeekendPeakProfileIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BenchName {
            get {
                return this.BenchNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BenchNameField, value) != true)) {
                    this.BenchNameField = value;
                    this.RaisePropertyChanged("BenchName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.HolidayCalendar Calendar {
            get {
                return this.CalendarField;
            }
            set {
                if ((object.ReferenceEquals(this.CalendarField, value) != true)) {
                    this.CalendarField = value;
                    this.RaisePropertyChanged("Calendar");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.Commodity Commodity {
            get {
                return this.CommodityField;
            }
            set {
                if ((object.ReferenceEquals(this.CommodityField, value) != true)) {
                    this.CommodityField = value;
                    this.RaisePropertyChanged("Commodity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasHourlyHistory {
            get {
                return this.HasHourlyHistoryField;
            }
            set {
                if ((this.HasHourlyHistoryField.Equals(value) != true)) {
                    this.HasHourlyHistoryField = value;
                    this.RaisePropertyChanged("HasHourlyHistory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnabled {
            get {
                return this.IsEnabledField;
            }
            set {
                if ((this.IsEnabledField.Equals(value) != true)) {
                    this.IsEnabledField = value;
                    this.RaisePropertyChanged("IsEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsGridPoint {
            get {
                return this.IsGridPointField;
            }
            set {
                if ((this.IsGridPointField.Equals(value) != true)) {
                    this.IsGridPointField = value;
                    this.RaisePropertyChanged("IsGridPoint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PeakProfileId {
            get {
                return this.PeakProfileIdField;
            }
            set {
                if ((this.PeakProfileIdField.Equals(value) != true)) {
                    this.PeakProfileIdField = value;
                    this.RaisePropertyChanged("PeakProfileId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ElvizTestUtils.LookUpServiceReference.PriceVolumeUnit> PriceUnit {
            get {
                return this.PriceUnitField;
            }
            set {
                if ((this.PriceUnitField.Equals(value) != true)) {
                    this.PriceUnitField = value;
                    this.RaisePropertyChanged("PriceUnit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ElvizTestUtils.LookUpServiceReference.QuantityUnit> QuantityUnit {
            get {
                return this.QuantityUnitField;
            }
            set {
                if ((this.QuantityUnitField.Equals(value) != true)) {
                    this.QuantityUnitField = value;
                    this.RaisePropertyChanged("QuantityUnit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SettlementAreaId {
            get {
                return this.SettlementAreaIdField;
            }
            set {
                if ((this.SettlementAreaIdField.Equals(value) != true)) {
                    this.SettlementAreaIdField = value;
                    this.RaisePropertyChanged("SettlementAreaId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SettlementAreaName {
            get {
                return this.SettlementAreaNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SettlementAreaNameField, value) != true)) {
                    this.SettlementAreaNameField = value;
                    this.RaisePropertyChanged("SettlementAreaName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SuperPeakProfileId {
            get {
                return this.SuperPeakProfileIdField;
            }
            set {
                if ((this.SuperPeakProfileIdField.Equals(value) != true)) {
                    this.SuperPeakProfileIdField = value;
                    this.RaisePropertyChanged("SuperPeakProfileId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WeekendPeakProfileId {
            get {
                return this.WeekendPeakProfileIdField;
            }
            set {
                if ((this.WeekendPeakProfileIdField.Equals(value) != true)) {
                    this.WeekendPeakProfileIdField = value;
                    this.RaisePropertyChanged("WeekendPeakProfileId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SettlementRule", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class SettlementRule : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BillingPeriodicityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BusinessDaysOffsetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CalendarDaysOffsetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] HolidayCalendarsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BillingPeriodicity {
            get {
                return this.BillingPeriodicityField;
            }
            set {
                if ((object.ReferenceEquals(this.BillingPeriodicityField, value) != true)) {
                    this.BillingPeriodicityField = value;
                    this.RaisePropertyChanged("BillingPeriodicity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BusinessDaysOffset {
            get {
                return this.BusinessDaysOffsetField;
            }
            set {
                if ((this.BusinessDaysOffsetField.Equals(value) != true)) {
                    this.BusinessDaysOffsetField = value;
                    this.RaisePropertyChanged("BusinessDaysOffset");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CalendarDaysOffset {
            get {
                return this.CalendarDaysOffsetField;
            }
            set {
                if ((this.CalendarDaysOffsetField.Equals(value) != true)) {
                    this.CalendarDaysOffsetField = value;
                    this.RaisePropertyChanged("CalendarDaysOffset");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] HolidayCalendars {
            get {
                return this.HolidayCalendarsField;
            }
            set {
                if ((object.ReferenceEquals(this.HolidayCalendarsField, value) != true)) {
                    this.HolidayCalendarsField = value;
                    this.RaisePropertyChanged("HolidayCalendars");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExecutionVenue", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class ExecutionVenue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CalendarIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExecutionVenueIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExecutionVenueNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CalendarId {
            get {
                return this.CalendarIdField;
            }
            set {
                if ((this.CalendarIdField.Equals(value) != true)) {
                    this.CalendarIdField = value;
                    this.RaisePropertyChanged("CalendarId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExecutionVenueId {
            get {
                return this.ExecutionVenueIdField;
            }
            set {
                if ((this.ExecutionVenueIdField.Equals(value) != true)) {
                    this.ExecutionVenueIdField = value;
                    this.RaisePropertyChanged("ExecutionVenueId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExecutionVenueName {
            get {
                return this.ExecutionVenueNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ExecutionVenueNameField, value) != true)) {
                    this.ExecutionVenueNameField = value;
                    this.RaisePropertyChanged("ExecutionVenueName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VersionInfo", Namespace="http://schemas.datacontract.org/2004/07/Viz.Integration.Core.Contract.Model.Trans" +
        "actions")]
    [System.SerializableAttribute()]
    public partial class VersionInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EffectiveDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EffectiveDate {
            get {
                return this.EffectiveDateField;
            }
            set {
                if ((this.EffectiveDateField.Equals(value) != true)) {
                    this.EffectiveDateField = value;
                    this.RaisePropertyChanged("EffectiveDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BookPriceType", Namespace="Elviz.API")]
    public enum BookPriceType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Fixed = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Spot = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Indexed = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AverageTradedCloseWithMargin = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AverageTradedAskWithMargin = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AverageTradedBidWithMargin = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EndUserElCertificate = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CapFloor = 8,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CashFlowPeriod", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class CashFlowPeriod : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FromDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FromDate {
            get {
                return this.FromDateField;
            }
            set {
                if ((this.FromDateField.Equals(value) != true)) {
                    this.FromDateField = value;
                    this.RaisePropertyChanged("FromDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClearingType", Namespace="Elviz.API")]
    public enum ClearingType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Broker = -1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Voice = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Electronic = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeliveryType", Namespace="Elviz.API")]
    public enum DeliveryType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Physical = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Financial = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FinancialOrPhysical = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Fee", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class Fee : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FeeTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FeeUnitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double FeeValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FeeValueTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FeeType {
            get {
                return this.FeeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.FeeTypeField, value) != true)) {
                    this.FeeTypeField = value;
                    this.RaisePropertyChanged("FeeType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FeeUnit {
            get {
                return this.FeeUnitField;
            }
            set {
                if ((object.ReferenceEquals(this.FeeUnitField, value) != true)) {
                    this.FeeUnitField = value;
                    this.RaisePropertyChanged("FeeUnit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double FeeValue {
            get {
                return this.FeeValueField;
            }
            set {
                if ((this.FeeValueField.Equals(value) != true)) {
                    this.FeeValueField = value;
                    this.RaisePropertyChanged("FeeValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FeeValueType {
            get {
                return this.FeeValueTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.FeeValueTypeField, value) != true)) {
                    this.FeeValueTypeField = value;
                    this.RaisePropertyChanged("FeeValueType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FutureSettlementType", Namespace="Elviz.API")]
    public enum FutureSettlementType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SettledByQuotes = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SettledAsForward = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VppNomination", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class VppNomination : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ToField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime From {
            get {
                return this.FromField;
            }
            set {
                if ((this.FromField.Equals(value) != true)) {
                    this.FromField = value;
                    this.RaisePropertyChanged("From");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime To {
            get {
                return this.ToField;
            }
            set {
                if ((this.ToField.Equals(value) != true)) {
                    this.ToField = value;
                    this.RaisePropertyChanged("To");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PriceVolumeTimeSeriesDetail", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class PriceVolumeTimeSeriesDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FromDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UntilDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UtcFromDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UtcUntilDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double VolumeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FromDateTime {
            get {
                return this.FromDateTimeField;
            }
            set {
                if ((this.FromDateTimeField.Equals(value) != true)) {
                    this.FromDateTimeField = value;
                    this.RaisePropertyChanged("FromDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UntilDateTime {
            get {
                return this.UntilDateTimeField;
            }
            set {
                if ((this.UntilDateTimeField.Equals(value) != true)) {
                    this.UntilDateTimeField = value;
                    this.RaisePropertyChanged("UntilDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UtcFromDateTime {
            get {
                return this.UtcFromDateTimeField;
            }
            set {
                if ((this.UtcFromDateTimeField.Equals(value) != true)) {
                    this.UtcFromDateTimeField = value;
                    this.RaisePropertyChanged("UtcFromDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UtcUntilDateTime {
            get {
                return this.UtcUntilDateTimeField;
            }
            set {
                if ((this.UtcUntilDateTimeField.Equals(value) != true)) {
                    this.UtcUntilDateTimeField = value;
                    this.RaisePropertyChanged("UtcUntilDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Volume {
            get {
                return this.VolumeField;
            }
            set {
                if ((this.VolumeField.Equals(value) != true)) {
                    this.VolumeField = value;
                    this.RaisePropertyChanged("Volume");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PriceVolumeUnit", Namespace="Elviz.API")]
    public enum PriceVolumeUnit : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PerMWh = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CentsPerTherm = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PerTon = 110,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PerECS = 111,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Perm3 = 112,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PerBbl = 150,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PerDay = 151,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PerWSpoints = 152,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PerYMWhd = 153,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pergal = 154,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PerGJ = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PerSm3 = 23,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Priority", Namespace="Elviz.API")]
    public enum Priority : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Firm = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Interruptible = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PropertyGroup", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class PropertyGroup : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.Property[] PropertiesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.Property[] Properties {
            get {
                return this.PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertiesField, value) != true)) {
                    this.PropertiesField = value;
                    this.RaisePropertyChanged("Properties");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PeriodKind", Namespace="http://schemas.datacontract.org/2004/07/Viz.Base")]
    public enum PeriodKind : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Min_1 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Min_5 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Min_10 = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Min_12 = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Min_15 = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Min_20 = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Min_30 = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Hour = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Day = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WorkDay = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WeekEnd = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WorkDayWeek = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Week = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Month = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Quarter = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Season = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HalfYear = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Year = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Custom = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CoalMonth = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Banded = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Single = 22,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PutCall", Namespace="Elviz.API")]
    public enum PutCall : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Put = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Call = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QuantityUnit", Namespace="Elviz.API")]
    public enum QuantityUnit : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MW = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MWhd = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MWh = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        KW = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MJd = 100,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MJh = 101,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GJd = 102,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GJh = 103,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TJd = 104,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TJh = 105,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        kWhd = 106,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Nm3d = 107,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Nm3h = 108,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        thd = 109,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ton = 110,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ECS = 111,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        thh = 112,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MMJd = 113,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sm3d = 114,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sm3h = 115,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Him3d = 116,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Him3h = 117,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Lom3d = 118,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Lom3h = 119,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LOT = 120,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Bbl = 150,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Day = 151,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        gal = 152,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Percent = 153,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Th = 154,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sm3 = 155,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GJ = 156,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        kWh = 157,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimeResolution", Namespace="Elviz.API")]
    public enum TimeResolution : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Minutes15 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Minutes30 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Hour = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Day = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Week = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Month = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Quarter = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Year = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unspecified = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EntirePeriod = 9,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SamplingPeriod", Namespace="Elviz.API")]
    public enum SamplingPeriod : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Week = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Month = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Day = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Quarter = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransactionStatus", Namespace="Elviz.API")]
    public enum TransactionStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Active = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Deleted = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Cleared = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Cancelled = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Onhold = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Declared = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MatchedExternally = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BidRejected = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Draft = 7,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimeSeries", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class TimeSeries : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.TimeResolution ResolutionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid TimeSeriesGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.TimeSeriesType TimeSeriesTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.TimeSeriesValue[] TimeSeriesValuesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TimezoneNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.VersionInfo VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.TimeResolution Resolution {
            get {
                return this.ResolutionField;
            }
            set {
                if ((this.ResolutionField.Equals(value) != true)) {
                    this.ResolutionField = value;
                    this.RaisePropertyChanged("Resolution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid TimeSeriesGuid {
            get {
                return this.TimeSeriesGuidField;
            }
            set {
                if ((this.TimeSeriesGuidField.Equals(value) != true)) {
                    this.TimeSeriesGuidField = value;
                    this.RaisePropertyChanged("TimeSeriesGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.TimeSeriesType TimeSeriesType {
            get {
                return this.TimeSeriesTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeSeriesTypeField, value) != true)) {
                    this.TimeSeriesTypeField = value;
                    this.RaisePropertyChanged("TimeSeriesType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.TimeSeriesValue[] TimeSeriesValues {
            get {
                return this.TimeSeriesValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeSeriesValuesField, value) != true)) {
                    this.TimeSeriesValuesField = value;
                    this.RaisePropertyChanged("TimeSeriesValues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TimezoneName {
            get {
                return this.TimezoneNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TimezoneNameField, value) != true)) {
                    this.TimezoneNameField = value;
                    this.RaisePropertyChanged("TimezoneName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.VersionInfo Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransactionType", Namespace="Elviz.API")]
    public enum TransactionType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Buy = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sell = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AbstractPriceSeries", Namespace="http://schemas.datacontract.org/2004/07/Viz.Integration.Core.Contract.Model")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ElvizTestUtils.LookUpServiceReference.PriceSeries))]
    public partial class AbstractPriceSeries : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExternalIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExternalId {
            get {
                return this.ExternalIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ExternalIdField, value) != true)) {
                    this.ExternalIdField = value;
                    this.RaisePropertyChanged("ExternalId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DomainObject", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ElvizTestUtils.LookUpServiceReference.LoadProfile))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ElvizTestUtils.LookUpServiceReference.InstrumentType))]
    public partial class DomainObject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomLoadType", Namespace="Elviz.API")]
    public enum CustomLoadType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Day = 100,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Week = 200,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Year = 300,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoadProfileEmptyDaysMode", Namespace="Elviz.API")]
    public enum LoadProfileEmptyDaysMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IncludeDayIfNotInProfile = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExcludeDayIfNotInProfile = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoadProfileHolidayTreatment", Namespace="Elviz.API")]
    public enum LoadProfileHolidayTreatment : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IgnoreHolidays = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoLoadOnHolidays = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecificLoadOnHolidays = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoadProfileHourSelectMode", Namespace="Elviz.API")]
    public enum LoadProfileHourSelectMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SelectPeak = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SelectOffPeak = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SystemLoadType", Namespace="Elviz.API")]
    public enum SystemLoadType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SystemBase = -1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SystemPeak = -2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SystemOffPeak = -3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WeekEndPeak = -4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WeekEndOffPeak = -5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SuperPeak = -6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HolidayCalendar", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class HolidayCalendar : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CalendarIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime[] HolidaysField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CalendarId {
            get {
                return this.CalendarIdField;
            }
            set {
                if ((this.CalendarIdField.Equals(value) != true)) {
                    this.CalendarIdField = value;
                    this.RaisePropertyChanged("CalendarId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime[] Holidays {
            get {
                return this.HolidaysField;
            }
            set {
                if ((object.ReferenceEquals(this.HolidaysField, value) != true)) {
                    this.HolidaysField = value;
                    this.RaisePropertyChanged("Holidays");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimeSeriesType", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class TimeSeriesType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimeSeriesValue", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class TimeSeriesValue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FromDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UntilDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UtcFromDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UtcUntilDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FromDateTime {
            get {
                return this.FromDateTimeField;
            }
            set {
                if ((this.FromDateTimeField.Equals(value) != true)) {
                    this.FromDateTimeField = value;
                    this.RaisePropertyChanged("FromDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UntilDateTime {
            get {
                return this.UntilDateTimeField;
            }
            set {
                if ((this.UntilDateTimeField.Equals(value) != true)) {
                    this.UntilDateTimeField = value;
                    this.RaisePropertyChanged("UntilDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UtcFromDateTime {
            get {
                return this.UtcFromDateTimeField;
            }
            set {
                if ((this.UtcFromDateTimeField.Equals(value) != true)) {
                    this.UtcFromDateTimeField = value;
                    this.RaisePropertyChanged("UtcFromDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UtcUntilDateTime {
            get {
                return this.UtcUntilDateTimeField;
            }
            set {
                if ((this.UtcUntilDateTimeField.Equals(value) != true)) {
                    this.UtcUntilDateTimeField = value;
                    this.RaisePropertyChanged("UtcUntilDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PortfolioAuthorisationDTO", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class PortfolioAuthorisationDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AuthorisedBuyQuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AuthorisedSellQuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PortfolioExternalIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PortfolioIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PortfolioNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuantityUnitField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AuthorisedBuyQuantity {
            get {
                return this.AuthorisedBuyQuantityField;
            }
            set {
                if ((this.AuthorisedBuyQuantityField.Equals(value) != true)) {
                    this.AuthorisedBuyQuantityField = value;
                    this.RaisePropertyChanged("AuthorisedBuyQuantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AuthorisedSellQuantity {
            get {
                return this.AuthorisedSellQuantityField;
            }
            set {
                if ((this.AuthorisedSellQuantityField.Equals(value) != true)) {
                    this.AuthorisedSellQuantityField = value;
                    this.RaisePropertyChanged("AuthorisedSellQuantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PortfolioExternalId {
            get {
                return this.PortfolioExternalIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PortfolioExternalIdField, value) != true)) {
                    this.PortfolioExternalIdField = value;
                    this.RaisePropertyChanged("PortfolioExternalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PortfolioId {
            get {
                return this.PortfolioIdField;
            }
            set {
                if ((this.PortfolioIdField.Equals(value) != true)) {
                    this.PortfolioIdField = value;
                    this.RaisePropertyChanged("PortfolioId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PortfolioName {
            get {
                return this.PortfolioNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PortfolioNameField, value) != true)) {
                    this.PortfolioNameField = value;
                    this.RaisePropertyChanged("PortfolioName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuantityUnit {
            get {
                return this.QuantityUnitField;
            }
            set {
                if ((object.ReferenceEquals(this.QuantityUnitField, value) != true)) {
                    this.QuantityUnitField = value;
                    this.RaisePropertyChanged("QuantityUnit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Criteria", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class Criteria : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<ElvizTestUtils.LookUpServiceReference.Action> ActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ChangeFromTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ChangeUntilTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChangedByUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> EntityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<ElvizTestUtils.LookUpServiceReference.EntityType> EntityTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ElvizTestUtils.LookUpServiceReference.Action> Action {
            get {
                return this.ActionField;
            }
            set {
                if ((this.ActionField.Equals(value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ChangeFromTime {
            get {
                return this.ChangeFromTimeField;
            }
            set {
                if ((this.ChangeFromTimeField.Equals(value) != true)) {
                    this.ChangeFromTimeField = value;
                    this.RaisePropertyChanged("ChangeFromTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ChangeUntilTime {
            get {
                return this.ChangeUntilTimeField;
            }
            set {
                if ((this.ChangeUntilTimeField.Equals(value) != true)) {
                    this.ChangeUntilTimeField = value;
                    this.RaisePropertyChanged("ChangeUntilTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ChangedByUser {
            get {
                return this.ChangedByUserField;
            }
            set {
                if ((object.ReferenceEquals(this.ChangedByUserField, value) != true)) {
                    this.ChangedByUserField = value;
                    this.RaisePropertyChanged("ChangedByUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> EntityId {
            get {
                return this.EntityIdField;
            }
            set {
                if ((this.EntityIdField.Equals(value) != true)) {
                    this.EntityIdField = value;
                    this.RaisePropertyChanged("EntityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ElvizTestUtils.LookUpServiceReference.EntityType> EntityType {
            get {
                return this.EntityTypeField;
            }
            set {
                if ((this.EntityTypeField.Equals(value) != true)) {
                    this.EntityTypeField = value;
                    this.RaisePropertyChanged("EntityType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Action", Namespace="Elviz.API")]
    public enum Action : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Add = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Update = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Delete = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityType", Namespace="http://schemas.datacontract.org/2004/07/Viz.Services.AuditTrailService.ClientLibr" +
        "ary")]
    public enum EntityType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Transaction = 0,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuditTrailEntry", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class AuditTrailEntry : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.Action ActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ChangeTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChangedByUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long EntityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EntityTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.KeyValuePair<string, string>[] FieldValuesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.Action Action {
            get {
                return this.ActionField;
            }
            set {
                if ((this.ActionField.Equals(value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ChangeTime {
            get {
                return this.ChangeTimeField;
            }
            set {
                if ((this.ChangeTimeField.Equals(value) != true)) {
                    this.ChangeTimeField = value;
                    this.RaisePropertyChanged("ChangeTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ChangedByUser {
            get {
                return this.ChangedByUserField;
            }
            set {
                if ((object.ReferenceEquals(this.ChangedByUserField, value) != true)) {
                    this.ChangedByUserField = value;
                    this.RaisePropertyChanged("ChangedByUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long EntityId {
            get {
                return this.EntityIdField;
            }
            set {
                if ((this.EntityIdField.Equals(value) != true)) {
                    this.EntityIdField = value;
                    this.RaisePropertyChanged("EntityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntityTypeName {
            get {
                return this.EntityTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityTypeNameField, value) != true)) {
                    this.EntityTypeNameField = value;
                    this.RaisePropertyChanged("EntityTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.KeyValuePair<string, string>[] FieldValues {
            get {
                return this.FieldValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldValuesField, value) != true)) {
                    this.FieldValuesField = value;
                    this.RaisePropertyChanged("FieldValues");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InstrumentCodes", Namespace="http://schemas.datacontract.org/2004/07/Viz.Integration.Core.Services.API")]
    [System.SerializableAttribute()]
    public partial class InstrumentCodes : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.LookUpServiceReference.InstrumentCode[] CodesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExternalIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TransactionIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.LookUpServiceReference.InstrumentCode[] Codes {
            get {
                return this.CodesField;
            }
            set {
                if ((object.ReferenceEquals(this.CodesField, value) != true)) {
                    this.CodesField = value;
                    this.RaisePropertyChanged("Codes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExternalId {
            get {
                return this.ExternalIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ExternalIdField, value) != true)) {
                    this.ExternalIdField = value;
                    this.RaisePropertyChanged("ExternalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TransactionId {
            get {
                return this.TransactionIdField;
            }
            set {
                if ((this.TransactionIdField.Equals(value) != true)) {
                    this.TransactionIdField = value;
                    this.RaisePropertyChanged("TransactionId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InstrumentCode", Namespace="http://schemas.datacontract.org/2004/07/Viz.Integration.Core.Services.API")]
    [System.SerializableAttribute()]
    public partial class InstrumentCode : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodeType {
            get {
                return this.CodeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeTypeField, value) != true)) {
                    this.CodeTypeField = value;
                    this.RaisePropertyChanged("CodeType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransactionProductName", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class TransactionProductName : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TransactionIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductName {
            get {
                return this.ProductNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductNameField, value) != true)) {
                    this.ProductNameField = value;
                    this.RaisePropertyChanged("ProductName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TransactionId {
            get {
                return this.TransactionIdField;
            }
            set {
                if ((this.TransactionIdField.Equals(value) != true)) {
                    this.TransactionIdField = value;
                    this.RaisePropertyChanged("TransactionId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductionFacility", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class ProductionFacility : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccreditationNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EnergySourceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] EnvironmentLabelIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FirstProductionYearField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GSRNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasEnergySourceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasFirstProductionYearField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasInstalledCapacityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double InstalledCapacityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccreditationNumber {
            get {
                return this.AccreditationNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.AccreditationNumberField, value) != true)) {
                    this.AccreditationNumberField = value;
                    this.RaisePropertyChanged("AccreditationNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryId {
            get {
                return this.CountryIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryIdField, value) != true)) {
                    this.CountryIdField = value;
                    this.RaisePropertyChanged("CountryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EnergySourceId {
            get {
                return this.EnergySourceIdField;
            }
            set {
                if ((this.EnergySourceIdField.Equals(value) != true)) {
                    this.EnergySourceIdField = value;
                    this.RaisePropertyChanged("EnergySourceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] EnvironmentLabelIds {
            get {
                return this.EnvironmentLabelIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.EnvironmentLabelIdsField, value) != true)) {
                    this.EnvironmentLabelIdsField = value;
                    this.RaisePropertyChanged("EnvironmentLabelIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FirstProductionYear {
            get {
                return this.FirstProductionYearField;
            }
            set {
                if ((this.FirstProductionYearField.Equals(value) != true)) {
                    this.FirstProductionYearField = value;
                    this.RaisePropertyChanged("FirstProductionYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GSRN {
            get {
                return this.GSRNField;
            }
            set {
                if ((object.ReferenceEquals(this.GSRNField, value) != true)) {
                    this.GSRNField = value;
                    this.RaisePropertyChanged("GSRN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasEnergySourceId {
            get {
                return this.HasEnergySourceIdField;
            }
            set {
                if ((this.HasEnergySourceIdField.Equals(value) != true)) {
                    this.HasEnergySourceIdField = value;
                    this.RaisePropertyChanged("HasEnergySourceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasFirstProductionYear {
            get {
                return this.HasFirstProductionYearField;
            }
            set {
                if ((this.HasFirstProductionYearField.Equals(value) != true)) {
                    this.HasFirstProductionYearField = value;
                    this.RaisePropertyChanged("HasFirstProductionYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasId {
            get {
                return this.HasIdField;
            }
            set {
                if ((this.HasIdField.Equals(value) != true)) {
                    this.HasIdField = value;
                    this.RaisePropertyChanged("HasId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasInstalledCapacity {
            get {
                return this.HasInstalledCapacityField;
            }
            set {
                if ((this.HasInstalledCapacityField.Equals(value) != true)) {
                    this.HasInstalledCapacityField = value;
                    this.RaisePropertyChanged("HasInstalledCapacity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double InstalledCapacity {
            get {
                return this.InstalledCapacityField;
            }
            set {
                if ((this.InstalledCapacityField.Equals(value) != true)) {
                    this.InstalledCapacityField = value;
                    this.RaisePropertyChanged("InstalledCapacity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Elviz.API", ConfigurationName="LookUpServiceReference.ILookupService")]
    public interface ILookupService {
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ILookupService/LookUp", ReplyAction="Elviz.API/ILookupService/LookUpResponse")]
        string LookUp(string xmlAsString);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ILookupService/GetAllPortfolios", ReplyAction="Elviz.API/ILookupService/GetAllPortfoliosResponse")]
        ElvizTestUtils.LookUpServiceReference.Portfolio[] GetAllPortfolios();
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ILookupService/GetAllCompanies", ReplyAction="Elviz.API/ILookupService/GetAllCompaniesResponse")]
        ElvizTestUtils.LookUpServiceReference.Company[] GetAllCompanies();
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ILookupService/GetTransactionsByFilterAndTradeDate", ReplyAction="Elviz.API/ILookupService/GetTransactionsByFilterAndTradeDateResponse")]
        ElvizTestUtils.LookUpServiceReference.TransactionDTO[] GetTransactionsByFilterAndTradeDate(string elvizFilterName, System.DateTime tradeDateFrom, System.DateTime tradeDateTo, ElvizTestUtils.LookUpServiceReference.RetrievalOptions retrievalOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ILookupService/GetTransactionsInFilter", ReplyAction="Elviz.API/ILookupService/GetTransactionsInFilterResponse")]
        ElvizTestUtils.LookUpServiceReference.TransactionDTO[] GetTransactionsInFilter(string filterName, ElvizTestUtils.LookUpServiceReference.RetrievalOptions retrievalOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ILookupService/DoesFilterExist", ReplyAction="Elviz.API/ILookupService/DoesFilterExistResponse")]
        bool DoesFilterExist(string filterName);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ILookupService/GetTransactionsInFilterForUser", ReplyAction="Elviz.API/ILookupService/GetTransactionsInFilterForUserResponse")]
        ElvizTestUtils.LookUpServiceReference.TransactionDTO[] GetTransactionsInFilterForUser(string filterName, string userName, ElvizTestUtils.LookUpServiceReference.RetrievalOptions retrievalOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ILookupService/DoesFilterExistForUser", ReplyAction="Elviz.API/ILookupService/DoesFilterExistForUserResponse")]
        bool DoesFilterExistForUser(string filterName, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ILookupService/GetExecutionVenueHolidays", ReplyAction="Elviz.API/ILookupService/GetExecutionVenueHolidaysResponse")]
        System.DateTime[] GetExecutionVenueHolidays(string executionVenueName);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ILookupService/GetAuthorisationsForAllPortfolios", ReplyAction="Elviz.API/ILookupService/GetAuthorisationsForAllPortfoliosResponse")]
        ElvizTestUtils.LookUpServiceReference.PortfolioAuthorisationDTO[] GetAuthorisationsForAllPortfolios(string userName, System.DateTime contractStartDate, System.DateTime contractToDate, System.DateTime reportDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ILookupService/GetTransactionsByIds", ReplyAction="Elviz.API/ILookupService/GetTransactionsByIdsResponse")]
        ElvizTestUtils.LookUpServiceReference.TransactionDTO[] GetTransactionsByIds(int[] ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ILookupService/GetAuditTrailEntries", ReplyAction="Elviz.API/ILookupService/GetAuditTrailEntriesResponse")]
        ElvizTestUtils.LookUpServiceReference.AuditTrailEntry[] GetAuditTrailEntries(ElvizTestUtils.LookUpServiceReference.Criteria criteria);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ILookupService/GetTransactionsInFilterByIds", ReplyAction="Elviz.API/ILookupService/GetTransactionsInFilterByIdsResponse")]
        ElvizTestUtils.LookUpServiceReference.TransactionDTO[] GetTransactionsInFilterByIds(string filterName, int[] ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ILookupService/GetTransactionsByFilterAndReportDate", ReplyAction="Elviz.API/ILookupService/GetTransactionsByFilterAndReportDateResponse")]
        ElvizTestUtils.LookUpServiceReference.TransactionDTO[] GetTransactionsByFilterAndReportDate(string filterName, System.DateTime reportDate, ElvizTestUtils.LookUpServiceReference.RetrievalOptions retrievalOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ILookupService/GetTransactionsByIdsAndReportDate", ReplyAction="Elviz.API/ILookupService/GetTransactionsByIdsAndReportDateResponse")]
        ElvizTestUtils.LookUpServiceReference.TransactionDTO[] GetTransactionsByIdsAndReportDate(int[] ids, System.DateTime reportDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ILookupService/GetInstrumentCodesByTransactionIds", ReplyAction="Elviz.API/ILookupService/GetInstrumentCodesByTransactionIdsResponse")]
        ElvizTestUtils.LookUpServiceReference.InstrumentCodes[] GetInstrumentCodesByTransactionIds(int[] transactionIds, string executionVenueForOTCProductCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ILookupService/GetInstrumentCodesByTransactionExternalIds", ReplyAction="Elviz.API/ILookupService/GetInstrumentCodesByTransactionExternalIdsResponse")]
        ElvizTestUtils.LookUpServiceReference.InstrumentCodes[] GetInstrumentCodesByTransactionExternalIds(string[] transactionExternalIds, string executionVenueForOTCProductCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ILookupService/GetProductNames", ReplyAction="Elviz.API/ILookupService/GetProductNamesResponse")]
        ElvizTestUtils.LookUpServiceReference.TransactionProductName[] GetProductNames(int[] transactionIds, string executionVenueForOTCProductCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ILookupService/GetOriginalTransactionsByExternalIds", ReplyAction="Elviz.API/ILookupService/GetOriginalTransactionsByExternalIdsResponse")]
        ElvizTestUtils.LookUpServiceReference.TransactionDTO[] GetOriginalTransactionsByExternalIds(string[] externalIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ILookupService/GetOriginalTransactionsByUTI", ReplyAction="Elviz.API/ILookupService/GetOriginalTransactionsByUTIResponse")]
        ElvizTestUtils.LookUpServiceReference.TransactionDTO[] GetOriginalTransactionsByUTI(string[] utis);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ILookupService/GetProductionFacilities", ReplyAction="Elviz.API/ILookupService/GetProductionFacilitiesResponse")]
        ElvizTestUtils.LookUpServiceReference.ProductionFacility[] GetProductionFacilities();
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ILookupService/GetTransactionIdsByFilter", ReplyAction="Elviz.API/ILookupService/GetTransactionIdsByFilterResponse")]
        int[] GetTransactionIdsByFilter(string filterName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILookupServiceChannel : ElvizTestUtils.LookUpServiceReference.ILookupService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LookupServiceClient : System.ServiceModel.ClientBase<ElvizTestUtils.LookUpServiceReference.ILookupService>, ElvizTestUtils.LookUpServiceReference.ILookupService {
        
        public LookupServiceClient() {
        }
        
        public LookupServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LookupServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LookupServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LookupServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string LookUp(string xmlAsString) {
            return base.Channel.LookUp(xmlAsString);
        }
        
        public ElvizTestUtils.LookUpServiceReference.Portfolio[] GetAllPortfolios() {
            return base.Channel.GetAllPortfolios();
        }
        
        public ElvizTestUtils.LookUpServiceReference.Company[] GetAllCompanies() {
            return base.Channel.GetAllCompanies();
        }
        
        public ElvizTestUtils.LookUpServiceReference.TransactionDTO[] GetTransactionsByFilterAndTradeDate(string elvizFilterName, System.DateTime tradeDateFrom, System.DateTime tradeDateTo, ElvizTestUtils.LookUpServiceReference.RetrievalOptions retrievalOptions) {
            return base.Channel.GetTransactionsByFilterAndTradeDate(elvizFilterName, tradeDateFrom, tradeDateTo, retrievalOptions);
        }
        
        public ElvizTestUtils.LookUpServiceReference.TransactionDTO[] GetTransactionsInFilter(string filterName, ElvizTestUtils.LookUpServiceReference.RetrievalOptions retrievalOptions) {
            return base.Channel.GetTransactionsInFilter(filterName, retrievalOptions);
        }
        
        public bool DoesFilterExist(string filterName) {
            return base.Channel.DoesFilterExist(filterName);
        }
        
        public ElvizTestUtils.LookUpServiceReference.TransactionDTO[] GetTransactionsInFilterForUser(string filterName, string userName, ElvizTestUtils.LookUpServiceReference.RetrievalOptions retrievalOptions) {
            return base.Channel.GetTransactionsInFilterForUser(filterName, userName, retrievalOptions);
        }
        
        public bool DoesFilterExistForUser(string filterName, string userName) {
            return base.Channel.DoesFilterExistForUser(filterName, userName);
        }
        
        public System.DateTime[] GetExecutionVenueHolidays(string executionVenueName) {
            return base.Channel.GetExecutionVenueHolidays(executionVenueName);
        }
        
        public ElvizTestUtils.LookUpServiceReference.PortfolioAuthorisationDTO[] GetAuthorisationsForAllPortfolios(string userName, System.DateTime contractStartDate, System.DateTime contractToDate, System.DateTime reportDate) {
            return base.Channel.GetAuthorisationsForAllPortfolios(userName, contractStartDate, contractToDate, reportDate);
        }
        
        public ElvizTestUtils.LookUpServiceReference.TransactionDTO[] GetTransactionsByIds(int[] ids) {
            return base.Channel.GetTransactionsByIds(ids);
        }
        
        public ElvizTestUtils.LookUpServiceReference.AuditTrailEntry[] GetAuditTrailEntries(ElvizTestUtils.LookUpServiceReference.Criteria criteria) {
            return base.Channel.GetAuditTrailEntries(criteria);
        }
        
        public ElvizTestUtils.LookUpServiceReference.TransactionDTO[] GetTransactionsInFilterByIds(string filterName, int[] ids) {
            return base.Channel.GetTransactionsInFilterByIds(filterName, ids);
        }
        
        public ElvizTestUtils.LookUpServiceReference.TransactionDTO[] GetTransactionsByFilterAndReportDate(string filterName, System.DateTime reportDate, ElvizTestUtils.LookUpServiceReference.RetrievalOptions retrievalOptions) {
            return base.Channel.GetTransactionsByFilterAndReportDate(filterName, reportDate, retrievalOptions);
        }
        
        public ElvizTestUtils.LookUpServiceReference.TransactionDTO[] GetTransactionsByIdsAndReportDate(int[] ids, System.DateTime reportDate) {
            return base.Channel.GetTransactionsByIdsAndReportDate(ids, reportDate);
        }
        
        public ElvizTestUtils.LookUpServiceReference.InstrumentCodes[] GetInstrumentCodesByTransactionIds(int[] transactionIds, string executionVenueForOTCProductCode) {
            return base.Channel.GetInstrumentCodesByTransactionIds(transactionIds, executionVenueForOTCProductCode);
        }
        
        public ElvizTestUtils.LookUpServiceReference.InstrumentCodes[] GetInstrumentCodesByTransactionExternalIds(string[] transactionExternalIds, string executionVenueForOTCProductCode) {
            return base.Channel.GetInstrumentCodesByTransactionExternalIds(transactionExternalIds, executionVenueForOTCProductCode);
        }
        
        public ElvizTestUtils.LookUpServiceReference.TransactionProductName[] GetProductNames(int[] transactionIds, string executionVenueForOTCProductCode) {
            return base.Channel.GetProductNames(transactionIds, executionVenueForOTCProductCode);
        }
        
        public ElvizTestUtils.LookUpServiceReference.TransactionDTO[] GetOriginalTransactionsByExternalIds(string[] externalIds) {
            return base.Channel.GetOriginalTransactionsByExternalIds(externalIds);
        }
        
        public ElvizTestUtils.LookUpServiceReference.TransactionDTO[] GetOriginalTransactionsByUTI(string[] utis) {
            return base.Channel.GetOriginalTransactionsByUTI(utis);
        }
        
        public ElvizTestUtils.LookUpServiceReference.ProductionFacility[] GetProductionFacilities() {
            return base.Channel.GetProductionFacilities();
        }
        
        public int[] GetTransactionIdsByFilter(string filterName) {
            return base.Channel.GetTransactionIdsByFilter(filterName);
        }
    }
}
