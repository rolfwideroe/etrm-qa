//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ElvizTestUtils.PortfolioManagementServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompanyDto", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class CompanyDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.PortfolioManagementServiceReference.Property[] AddressesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryIsoCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.PortfolioManagementServiceReference.CreditRiskPropertiesDto CreditRiskPropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExternalIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrgNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParentExternalIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.PortfolioManagementServiceReference.Property[] PhonesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.PortfolioManagementServiceReference.Property[] PropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.PortfolioManagementServiceReference.CompanyRole[] RolesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ShortNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.PortfolioManagementServiceReference.Property[] Addresses {
            get {
                return this.AddressesField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressesField, value) != true)) {
                    this.AddressesField = value;
                    this.RaisePropertyChanged("Addresses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryIsoCode {
            get {
                return this.CountryIsoCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryIsoCodeField, value) != true)) {
                    this.CountryIsoCodeField = value;
                    this.RaisePropertyChanged("CountryIsoCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.PortfolioManagementServiceReference.CreditRiskPropertiesDto CreditRiskProperties {
            get {
                return this.CreditRiskPropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.CreditRiskPropertiesField, value) != true)) {
                    this.CreditRiskPropertiesField = value;
                    this.RaisePropertyChanged("CreditRiskProperties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExternalId {
            get {
                return this.ExternalIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ExternalIdField, value) != true)) {
                    this.ExternalIdField = value;
                    this.RaisePropertyChanged("ExternalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrgNo {
            get {
                return this.OrgNoField;
            }
            set {
                if ((object.ReferenceEquals(this.OrgNoField, value) != true)) {
                    this.OrgNoField = value;
                    this.RaisePropertyChanged("OrgNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParentExternalId {
            get {
                return this.ParentExternalIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentExternalIdField, value) != true)) {
                    this.ParentExternalIdField = value;
                    this.RaisePropertyChanged("ParentExternalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.PortfolioManagementServiceReference.Property[] Phones {
            get {
                return this.PhonesField;
            }
            set {
                if ((object.ReferenceEquals(this.PhonesField, value) != true)) {
                    this.PhonesField = value;
                    this.RaisePropertyChanged("Phones");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.PortfolioManagementServiceReference.Property[] Properties {
            get {
                return this.PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertiesField, value) != true)) {
                    this.PropertiesField = value;
                    this.RaisePropertyChanged("Properties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.PortfolioManagementServiceReference.CompanyRole[] Roles {
            get {
                return this.RolesField;
            }
            set {
                if ((object.ReferenceEquals(this.RolesField, value) != true)) {
                    this.RolesField = value;
                    this.RaisePropertyChanged("Roles");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShortName {
            get {
                return this.ShortNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ShortNameField, value) != true)) {
                    this.ShortNameField = value;
                    this.RaisePropertyChanged("ShortName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CreditRiskPropertiesDto", Namespace="http://schemas.datacontract.org/2004/07/Viz.Integration.Core.Contract.Model")]
    [System.SerializableAttribute()]
    public partial class CreditRiskPropertiesDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> CreditLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreditLimitIsoCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreditRatingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool NettingField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> CreditLimit {
            get {
                return this.CreditLimitField;
            }
            set {
                if ((this.CreditLimitField.Equals(value) != true)) {
                    this.CreditLimitField = value;
                    this.RaisePropertyChanged("CreditLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreditLimitIsoCurrency {
            get {
                return this.CreditLimitIsoCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.CreditLimitIsoCurrencyField, value) != true)) {
                    this.CreditLimitIsoCurrencyField = value;
                    this.RaisePropertyChanged("CreditLimitIsoCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreditRating {
            get {
                return this.CreditRatingField;
            }
            set {
                if ((object.ReferenceEquals(this.CreditRatingField, value) != true)) {
                    this.CreditRatingField = value;
                    this.RaisePropertyChanged("CreditRating");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Netting {
            get {
                return this.NettingField;
            }
            set {
                if ((this.NettingField.Equals(value) != true)) {
                    this.NettingField = value;
                    this.RaisePropertyChanged("Netting");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Property", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class Property : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ValueType {
            get {
                return this.ValueTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueTypeField, value) != true)) {
                    this.ValueTypeField = value;
                    this.RaisePropertyChanged("ValueType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompanyRole", Namespace="Elviz.API")]
    public enum CompanyRole : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TradeCompany = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Customer = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Counterparty = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Broker = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Exchange = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BillingCompany = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PortfolioManager = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CurrencyCounterparty = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GeneralClearingMember = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BalanceResponsibleParty = 10,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PortfolioDto", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class PortfolioDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyExternalIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExternalIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParentPortfolioExternalIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.PortfolioManagementServiceReference.Property[] PropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ShortNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyExternalId {
            get {
                return this.CompanyExternalIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyExternalIdField, value) != true)) {
                    this.CompanyExternalIdField = value;
                    this.RaisePropertyChanged("CompanyExternalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExternalId {
            get {
                return this.ExternalIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ExternalIdField, value) != true)) {
                    this.ExternalIdField = value;
                    this.RaisePropertyChanged("ExternalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParentPortfolioExternalId {
            get {
                return this.ParentPortfolioExternalIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentPortfolioExternalIdField, value) != true)) {
                    this.ParentPortfolioExternalIdField = value;
                    this.RaisePropertyChanged("ParentPortfolioExternalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.PortfolioManagementServiceReference.Property[] Properties {
            get {
                return this.PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertiesField, value) != true)) {
                    this.PropertiesField = value;
                    this.RaisePropertyChanged("Properties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShortName {
            get {
                return this.ShortNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ShortNameField, value) != true)) {
                    this.ShortNameField = value;
                    this.RaisePropertyChanged("ShortName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Elviz.API", ConfigurationName="PortfolioManagementServiceReference.IPortfolioManagementService")]
    public interface IPortfolioManagementService {
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/IPortfolioManagementService/CreateCompanies", ReplyAction="Elviz.API/IPortfolioManagementService/CreateCompaniesResponse")]
        void CreateCompanies(ElvizTestUtils.PortfolioManagementServiceReference.CompanyDto[] companies);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/IPortfolioManagementService/UpdateCompanies", ReplyAction="Elviz.API/IPortfolioManagementService/UpdateCompaniesResponse")]
        void UpdateCompanies(ElvizTestUtils.PortfolioManagementServiceReference.CompanyDto[] companies);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/IPortfolioManagementService/FindCompanies", ReplyAction="Elviz.API/IPortfolioManagementService/FindCompaniesResponse")]
        ElvizTestUtils.PortfolioManagementServiceReference.CompanyDto[] FindCompanies(string[] externalIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/IPortfolioManagementService/GetAllPortfolios", ReplyAction="Elviz.API/IPortfolioManagementService/GetAllPortfoliosResponse")]
        ElvizTestUtils.PortfolioManagementServiceReference.PortfolioDto[] GetAllPortfolios();
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/IPortfolioManagementService/CreatePortfolios", ReplyAction="Elviz.API/IPortfolioManagementService/CreatePortfoliosResponse")]
        void CreatePortfolios(ElvizTestUtils.PortfolioManagementServiceReference.PortfolioDto[] portfolios);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/IPortfolioManagementService/UpdatePortfolios", ReplyAction="Elviz.API/IPortfolioManagementService/UpdatePortfoliosResponse")]
        void UpdatePortfolios(ElvizTestUtils.PortfolioManagementServiceReference.PortfolioDto[] portfolios);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/IPortfolioManagementService/FindPortfolios", ReplyAction="Elviz.API/IPortfolioManagementService/FindPortfoliosResponse")]
        ElvizTestUtils.PortfolioManagementServiceReference.PortfolioDto[] FindPortfolios(string[] externalIds);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPortfolioManagementServiceChannel : ElvizTestUtils.PortfolioManagementServiceReference.IPortfolioManagementService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PortfolioManagementServiceClient : System.ServiceModel.ClientBase<ElvizTestUtils.PortfolioManagementServiceReference.IPortfolioManagementService>, ElvizTestUtils.PortfolioManagementServiceReference.IPortfolioManagementService {
        
        public PortfolioManagementServiceClient() {
        }
        
        public PortfolioManagementServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PortfolioManagementServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PortfolioManagementServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PortfolioManagementServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void CreateCompanies(ElvizTestUtils.PortfolioManagementServiceReference.CompanyDto[] companies) {
            base.Channel.CreateCompanies(companies);
        }
        
        public void UpdateCompanies(ElvizTestUtils.PortfolioManagementServiceReference.CompanyDto[] companies) {
            base.Channel.UpdateCompanies(companies);
        }
        
        public ElvizTestUtils.PortfolioManagementServiceReference.CompanyDto[] FindCompanies(string[] externalIds) {
            return base.Channel.FindCompanies(externalIds);
        }
        
        public ElvizTestUtils.PortfolioManagementServiceReference.PortfolioDto[] GetAllPortfolios() {
            return base.Channel.GetAllPortfolios();
        }
        
        public void CreatePortfolios(ElvizTestUtils.PortfolioManagementServiceReference.PortfolioDto[] portfolios) {
            base.Channel.CreatePortfolios(portfolios);
        }
        
        public void UpdatePortfolios(ElvizTestUtils.PortfolioManagementServiceReference.PortfolioDto[] portfolios) {
            base.Channel.UpdatePortfolios(portfolios);
        }
        
        public ElvizTestUtils.PortfolioManagementServiceReference.PortfolioDto[] FindPortfolios(string[] externalIds) {
            return base.Channel.FindPortfolios(externalIds);
        }
    }
}
