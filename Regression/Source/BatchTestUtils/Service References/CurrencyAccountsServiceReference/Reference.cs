//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ElvizTestUtils.CurrencyAccountsServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CurrencyAccountDTO", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class CurrencyAccountDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BalanceDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrencyIsoCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double NominalAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UpdateTimeStampUtcField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UpdatedByField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime BalanceDate {
            get {
                return this.BalanceDateField;
            }
            set {
                if ((this.BalanceDateField.Equals(value) != true)) {
                    this.BalanceDateField = value;
                    this.RaisePropertyChanged("BalanceDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrencyIsoCode {
            get {
                return this.CurrencyIsoCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrencyIsoCodeField, value) != true)) {
                    this.CurrencyIsoCodeField = value;
                    this.RaisePropertyChanged("CurrencyIsoCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double NominalAmount {
            get {
                return this.NominalAmountField;
            }
            set {
                if ((this.NominalAmountField.Equals(value) != true)) {
                    this.NominalAmountField = value;
                    this.RaisePropertyChanged("NominalAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UpdateTimeStampUtc {
            get {
                return this.UpdateTimeStampUtcField;
            }
            set {
                if ((this.UpdateTimeStampUtcField.Equals(value) != true)) {
                    this.UpdateTimeStampUtcField = value;
                    this.RaisePropertyChanged("UpdateTimeStampUtc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UpdatedBy {
            get {
                return this.UpdatedByField;
            }
            set {
                if ((object.ReferenceEquals(this.UpdatedByField, value) != true)) {
                    this.UpdatedByField = value;
                    this.RaisePropertyChanged("UpdatedBy");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Elviz.API", ConfigurationName="CurrencyAccountsServiceReference.ICurrencyAccountService")]
    public interface ICurrencyAccountService {
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ICurrencyAccountService/GetCurrencyAccounts", ReplyAction="Elviz.API/ICurrencyAccountService/GetCurrencyAccountsResponse")]
        ElvizTestUtils.CurrencyAccountsServiceReference.CurrencyAccountDTO[] GetCurrencyAccounts(System.DateTime BalanceDateFrom, System.DateTime BalanceDateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ICurrencyAccountService/UpdateCurrencyAccountBalances", ReplyAction="Elviz.API/ICurrencyAccountService/UpdateCurrencyAccountBalancesResponse")]
        void UpdateCurrencyAccountBalances(System.DateTime balanceDateFrom, ElvizTestUtils.CurrencyAccountsServiceReference.CurrencyAccountDTO[] currencyAccounts);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ICurrencyAccountService/GetMostRecentCurrencyAccountBalances", ReplyAction="Elviz.API/ICurrencyAccountService/GetMostRecentCurrencyAccountBalancesResponse")]
        ElvizTestUtils.CurrencyAccountsServiceReference.CurrencyAccountDTO[] GetMostRecentCurrencyAccountBalances();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICurrencyAccountServiceChannel : ElvizTestUtils.CurrencyAccountsServiceReference.ICurrencyAccountService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrencyAccountServiceClient : System.ServiceModel.ClientBase<ElvizTestUtils.CurrencyAccountsServiceReference.ICurrencyAccountService>, ElvizTestUtils.CurrencyAccountsServiceReference.ICurrencyAccountService {
        
        public CurrencyAccountServiceClient() {
        }
        
        public CurrencyAccountServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CurrencyAccountServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyAccountServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyAccountServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ElvizTestUtils.CurrencyAccountsServiceReference.CurrencyAccountDTO[] GetCurrencyAccounts(System.DateTime BalanceDateFrom, System.DateTime BalanceDateTo) {
            return base.Channel.GetCurrencyAccounts(BalanceDateFrom, BalanceDateTo);
        }
        
        public void UpdateCurrencyAccountBalances(System.DateTime balanceDateFrom, ElvizTestUtils.CurrencyAccountsServiceReference.CurrencyAccountDTO[] currencyAccounts) {
            base.Channel.UpdateCurrencyAccountBalances(balanceDateFrom, currencyAccounts);
        }
        
        public ElvizTestUtils.CurrencyAccountsServiceReference.CurrencyAccountDTO[] GetMostRecentCurrencyAccountBalances() {
            return base.Channel.GetMostRecentCurrencyAccountBalances();
        }
    }
}
