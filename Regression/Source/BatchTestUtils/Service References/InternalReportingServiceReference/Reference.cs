//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ElvizTestUtils.InternalReportingServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReportEngineDescription", Namespace="http://schemas.datacontract.org/2004/07/Viz.Integration.Core.Services.API.Reporti" +
        "ngApi")]
    [System.SerializableAttribute()]
    public partial class ReportEngineDescription : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.InternalReportingServiceReference.ArtifactDescription[] ArtifactDescriptionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReportDisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.InternalReportingServiceReference.SettingDescription[] SettingDescriptionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UniqueIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.InternalReportingServiceReference.ArtifactDescription[] ArtifactDescriptions {
            get {
                return this.ArtifactDescriptionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtifactDescriptionsField, value) != true)) {
                    this.ArtifactDescriptionsField = value;
                    this.RaisePropertyChanged("ArtifactDescriptions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReportDisplayName {
            get {
                return this.ReportDisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ReportDisplayNameField, value) != true)) {
                    this.ReportDisplayNameField = value;
                    this.RaisePropertyChanged("ReportDisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.InternalReportingServiceReference.SettingDescription[] SettingDescriptions {
            get {
                return this.SettingDescriptionsField;
            }
            set {
                if ((object.ReferenceEquals(this.SettingDescriptionsField, value) != true)) {
                    this.SettingDescriptionsField = value;
                    this.RaisePropertyChanged("SettingDescriptions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UniqueId {
            get {
                return this.UniqueIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UniqueIdField, value) != true)) {
                    this.UniqueIdField = value;
                    this.RaisePropertyChanged("UniqueId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ArtifactDescription", Namespace="http://schemas.datacontract.org/2004/07/Viz.Integration.Core.Services.API.Reporti" +
        "ngApi")]
    [System.SerializableAttribute()]
    public partial class ArtifactDescription : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImportanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.InternalReportingServiceReference.ArtifactDescription[] SubArtifactsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UniqueIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Importance {
            get {
                return this.ImportanceField;
            }
            set {
                if ((object.ReferenceEquals(this.ImportanceField, value) != true)) {
                    this.ImportanceField = value;
                    this.RaisePropertyChanged("Importance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.InternalReportingServiceReference.ArtifactDescription[] SubArtifacts {
            get {
                return this.SubArtifactsField;
            }
            set {
                if ((object.ReferenceEquals(this.SubArtifactsField, value) != true)) {
                    this.SubArtifactsField = value;
                    this.RaisePropertyChanged("SubArtifacts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UniqueId {
            get {
                return this.UniqueIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UniqueIdField, value) != true)) {
                    this.UniqueIdField = value;
                    this.RaisePropertyChanged("UniqueId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SettingDescription", Namespace="http://schemas.datacontract.org/2004/07/Viz.Integration.Core.Services.API.Reporti" +
        "ngApi")]
    [System.SerializableAttribute()]
    public partial class SettingDescription : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRequiredField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SettingsGroupNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UniqueIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueTypeNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRequired {
            get {
                return this.IsRequiredField;
            }
            set {
                if ((this.IsRequiredField.Equals(value) != true)) {
                    this.IsRequiredField = value;
                    this.RaisePropertyChanged("IsRequired");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SettingsGroupName {
            get {
                return this.SettingsGroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SettingsGroupNameField, value) != true)) {
                    this.SettingsGroupNameField = value;
                    this.RaisePropertyChanged("SettingsGroupName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UniqueId {
            get {
                return this.UniqueIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UniqueIdField, value) != true)) {
                    this.UniqueIdField = value;
                    this.RaisePropertyChanged("UniqueId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ValueTypeName {
            get {
                return this.ValueTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueTypeNameField, value) != true)) {
                    this.ValueTypeNameField = value;
                    this.RaisePropertyChanged("ValueTypeName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Setting", Namespace="http://schemas.datacontract.org/2004/07/Viz.Integration.Core.Services.API.Reporti" +
        "ngApi")]
    [System.SerializableAttribute()]
    public partial class Setting : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNotSetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SettingIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string XmlEncodedValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNotSet {
            get {
                return this.IsNotSetField;
            }
            set {
                if ((this.IsNotSetField.Equals(value) != true)) {
                    this.IsNotSetField = value;
                    this.RaisePropertyChanged("IsNotSet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SettingId {
            get {
                return this.SettingIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SettingIdField, value) != true)) {
                    this.SettingIdField = value;
                    this.RaisePropertyChanged("SettingId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string XmlEncodedValue {
            get {
                return this.XmlEncodedValueField;
            }
            set {
                if ((object.ReferenceEquals(this.XmlEncodedValueField, value) != true)) {
                    this.XmlEncodedValueField = value;
                    this.RaisePropertyChanged("XmlEncodedValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SettingsVerificationIssue", Namespace="http://schemas.datacontract.org/2004/07/Viz.Integration.Core.Services.API.Reporti" +
        "ngApi")]
    [System.SerializableAttribute()]
    public partial class SettingsVerificationIssue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AppliesToSettingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SeverityField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AppliesToSetting {
            get {
                return this.AppliesToSettingField;
            }
            set {
                if ((object.ReferenceEquals(this.AppliesToSettingField, value) != true)) {
                    this.AppliesToSettingField = value;
                    this.RaisePropertyChanged("AppliesToSetting");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Severity {
            get {
                return this.SeverityField;
            }
            set {
                if ((object.ReferenceEquals(this.SeverityField, value) != true)) {
                    this.SeverityField = value;
                    this.RaisePropertyChanged("Severity");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Report", Namespace="http://schemas.datacontract.org/2004/07/Viz.Integration.Core.Services.API.Reporti" +
        "ngApi")]
    [System.SerializableAttribute()]
    public partial class Report : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.InternalReportingServiceReference.DataTableArtifact[] DataTableArtifactsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.InternalReportingServiceReference.Setting[] SettingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.InternalReportingServiceReference.TimeSeriesGroupArtifact[] TimeSeriesArtifactsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.InternalReportingServiceReference.DataTableArtifact[] DataTableArtifacts {
            get {
                return this.DataTableArtifactsField;
            }
            set {
                if ((object.ReferenceEquals(this.DataTableArtifactsField, value) != true)) {
                    this.DataTableArtifactsField = value;
                    this.RaisePropertyChanged("DataTableArtifacts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.InternalReportingServiceReference.Setting[] Settings {
            get {
                return this.SettingsField;
            }
            set {
                if ((object.ReferenceEquals(this.SettingsField, value) != true)) {
                    this.SettingsField = value;
                    this.RaisePropertyChanged("Settings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.InternalReportingServiceReference.TimeSeriesGroupArtifact[] TimeSeriesArtifacts {
            get {
                return this.TimeSeriesArtifactsField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeSeriesArtifactsField, value) != true)) {
                    this.TimeSeriesArtifactsField = value;
                    this.RaisePropertyChanged("TimeSeriesArtifacts");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataTableArtifact", Namespace="http://schemas.datacontract.org/2004/07/Viz.Integration.Core.Services.API.Reporti" +
        "ngApi")]
    [System.SerializableAttribute()]
    public partial class DataTableArtifact : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtifactIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Data.DataTable DataTableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImportanceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArtifactId {
            get {
                return this.ArtifactIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtifactIdField, value) != true)) {
                    this.ArtifactIdField = value;
                    this.RaisePropertyChanged("ArtifactId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Data.DataTable DataTable {
            get {
                return this.DataTableField;
            }
            set {
                if ((object.ReferenceEquals(this.DataTableField, value) != true)) {
                    this.DataTableField = value;
                    this.RaisePropertyChanged("DataTable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Importance {
            get {
                return this.ImportanceField;
            }
            set {
                if ((object.ReferenceEquals(this.ImportanceField, value) != true)) {
                    this.ImportanceField = value;
                    this.RaisePropertyChanged("Importance");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimeSeriesGroupArtifact", Namespace="http://schemas.datacontract.org/2004/07/Viz.Integration.Core.Services.API.Reporti" +
        "ngApi")]
    [System.SerializableAttribute()]
    public partial class TimeSeriesGroupArtifact : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtifactIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImportanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.InternalReportingServiceReference.TimeSeries[] TimeSeriesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArtifactId {
            get {
                return this.ArtifactIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtifactIdField, value) != true)) {
                    this.ArtifactIdField = value;
                    this.RaisePropertyChanged("ArtifactId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Importance {
            get {
                return this.ImportanceField;
            }
            set {
                if ((object.ReferenceEquals(this.ImportanceField, value) != true)) {
                    this.ImportanceField = value;
                    this.RaisePropertyChanged("Importance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.InternalReportingServiceReference.TimeSeries[] TimeSeries {
            get {
                return this.TimeSeriesField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeSeriesField, value) != true)) {
                    this.TimeSeriesField = value;
                    this.RaisePropertyChanged("TimeSeries");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimeSeries", Namespace="http://schemas.datacontract.org/2004/07/Viz.Integration.Core.Services.API.Reporti" +
        "ngApi")]
    [System.SerializableAttribute()]
    public partial class TimeSeries : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.InternalReportingServiceReference.Property[] PropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElvizTestUtils.InternalReportingServiceReference.TimeSeriesElement[] TimeSeriesElementsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TimeZoneField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.InternalReportingServiceReference.Property[] Properties {
            get {
                return this.PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertiesField, value) != true)) {
                    this.PropertiesField = value;
                    this.RaisePropertyChanged("Properties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElvizTestUtils.InternalReportingServiceReference.TimeSeriesElement[] TimeSeriesElements {
            get {
                return this.TimeSeriesElementsField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeSeriesElementsField, value) != true)) {
                    this.TimeSeriesElementsField = value;
                    this.RaisePropertyChanged("TimeSeriesElements");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TimeZone {
            get {
                return this.TimeZoneField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeZoneField, value) != true)) {
                    this.TimeZoneField = value;
                    this.RaisePropertyChanged("TimeZone");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Property", Namespace="http://schemas.datacontract.org/2004/07/Viz.Integration.Core.Services.API.Reporti" +
        "ngApi")]
    [System.SerializableAttribute()]
    public partial class Property : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PropertyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PropertyValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyName {
            get {
                return this.PropertyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyNameField, value) != true)) {
                    this.PropertyNameField = value;
                    this.RaisePropertyChanged("PropertyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyValue {
            get {
                return this.PropertyValueField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyValueField, value) != true)) {
                    this.PropertyValueField = value;
                    this.RaisePropertyChanged("PropertyValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimeSeriesElement", Namespace="http://schemas.datacontract.org/2004/07/Viz.Integration.Core.Services.API.Reporti" +
        "ngApi")]
    [System.SerializableAttribute()]
    public partial class TimeSeriesElement : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FromTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FromTimeUtcField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UntilTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UntilTimeUtcField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FromTime {
            get {
                return this.FromTimeField;
            }
            set {
                if ((this.FromTimeField.Equals(value) != true)) {
                    this.FromTimeField = value;
                    this.RaisePropertyChanged("FromTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FromTimeUtc {
            get {
                return this.FromTimeUtcField;
            }
            set {
                if ((this.FromTimeUtcField.Equals(value) != true)) {
                    this.FromTimeUtcField = value;
                    this.RaisePropertyChanged("FromTimeUtc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UntilTime {
            get {
                return this.UntilTimeField;
            }
            set {
                if ((this.UntilTimeField.Equals(value) != true)) {
                    this.UntilTimeField = value;
                    this.RaisePropertyChanged("UntilTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UntilTimeUtc {
            get {
                return this.UntilTimeUtcField;
            }
            set {
                if ((this.UntilTimeUtcField.Equals(value) != true)) {
                    this.UntilTimeUtcField = value;
                    this.RaisePropertyChanged("UntilTimeUtc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Elviz.API.Internal", ConfigurationName="InternalReportingServiceReference.IInternalReportingApiService")]
    public interface IInternalReportingApiService {
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API.Internal/IInternalReportingApiService/GetReportingEngineDescriptions", ReplyAction="Elviz.API.Internal/IInternalReportingApiService/GetReportingEngineDescriptionsRes" +
            "ponse")]
        ElvizTestUtils.InternalReportingServiceReference.ReportEngineDescription[] GetReportingEngineDescriptions();
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API.Internal/IInternalReportingApiService/GetPredefinedSettingsSet", ReplyAction="Elviz.API.Internal/IInternalReportingApiService/GetPredefinedSettingsSetResponse")]
        ElvizTestUtils.InternalReportingServiceReference.Setting[] GetPredefinedSettingsSet(string reportId, string settingsSetName);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API.Internal/IInternalReportingApiService/VerifySettings", ReplyAction="Elviz.API.Internal/IInternalReportingApiService/VerifySettingsResponse")]
        ElvizTestUtils.InternalReportingServiceReference.SettingsVerificationIssue[] VerifySettings(string reportId, ElvizTestUtils.InternalReportingServiceReference.Setting[] reportSettings, string[] artifacts);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API.Internal/IInternalReportingApiService/RunReport", ReplyAction="Elviz.API.Internal/IInternalReportingApiService/RunReportResponse")]
        ElvizTestUtils.InternalReportingServiceReference.Report RunReport(string reportId, ElvizTestUtils.InternalReportingServiceReference.Setting[] reportSettings, string[] artifacts);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IInternalReportingApiServiceChannel : ElvizTestUtils.InternalReportingServiceReference.IInternalReportingApiService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InternalReportingApiServiceClient : System.ServiceModel.ClientBase<ElvizTestUtils.InternalReportingServiceReference.IInternalReportingApiService>, ElvizTestUtils.InternalReportingServiceReference.IInternalReportingApiService {
        
        public InternalReportingApiServiceClient() {
        }
        
        public InternalReportingApiServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public InternalReportingApiServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InternalReportingApiServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InternalReportingApiServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ElvizTestUtils.InternalReportingServiceReference.ReportEngineDescription[] GetReportingEngineDescriptions() {
            return base.Channel.GetReportingEngineDescriptions();
        }
        
        public ElvizTestUtils.InternalReportingServiceReference.Setting[] GetPredefinedSettingsSet(string reportId, string settingsSetName) {
            return base.Channel.GetPredefinedSettingsSet(reportId, settingsSetName);
        }
        
        public ElvizTestUtils.InternalReportingServiceReference.SettingsVerificationIssue[] VerifySettings(string reportId, ElvizTestUtils.InternalReportingServiceReference.Setting[] reportSettings, string[] artifacts) {
            return base.Channel.VerifySettings(reportId, reportSettings, artifacts);
        }
        
        public ElvizTestUtils.InternalReportingServiceReference.Report RunReport(string reportId, ElvizTestUtils.InternalReportingServiceReference.Setting[] reportSettings, string[] artifacts) {
            return base.Channel.RunReport(reportId, reportSettings, artifacts);
        }
    }
}
