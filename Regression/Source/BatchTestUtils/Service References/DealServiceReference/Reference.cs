//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ElvizTestUtils.DealServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransactionStatus", Namespace="Elviz.API")]
    public enum TransactionStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Active = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Deleted = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Cleared = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Cancelled = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Onhold = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Declared = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MatchedExternally = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BidRejected = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Draft = 7,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PropertyValuePair", Namespace="http://schemas.datacontract.org/2004/07/Viz.Integration.Core.Services.API")]
    [System.SerializableAttribute()]
    public partial class PropertyValuePair : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PropertyGroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PropertyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyGroup {
            get {
                return this.PropertyGroupField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyGroupField, value) != true)) {
                    this.PropertyGroupField = value;
                    this.RaisePropertyChanged("PropertyGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyName {
            get {
                return this.PropertyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyNameField, value) != true)) {
                    this.PropertyNameField = value;
                    this.RaisePropertyChanged("PropertyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupFields", Namespace="Elviz.API")]
    public enum GroupFields : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GroupField1 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GroupField2 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GroupField3 = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Elviz.API", ConfigurationName="DealServiceReference.IDealService")]
    public interface IDealService {
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/IDealService/ImportDeal", ReplyAction="Elviz.API/IDealService/ImportDealResponse")]
        string ImportDeal(string xmlDealAsString);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/IDealService/UpdateStatus", ReplyAction="Elviz.API/IDealService/UpdateStatusResponse")]
        bool UpdateStatus(System.Collections.Generic.Dictionary<int, ElvizTestUtils.DealServiceReference.TransactionStatus> data);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/IDealService/SetPropertyValues", ReplyAction="Elviz.API/IDealService/SetPropertyValuesResponse")]
        bool SetPropertyValues(System.Collections.Generic.Dictionary<int, ElvizTestUtils.DealServiceReference.PropertyValuePair[]> transactionPropertyValues);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/IDealService/SetGroupField", ReplyAction="Elviz.API/IDealService/SetGroupFieldResponse")]
        bool SetGroupField(int[] transactionIds, ElvizTestUtils.DealServiceReference.GroupFields dealGroup, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/IDealService/PartialUpdateImportDeal", ReplyAction="Elviz.API/IDealService/PartialUpdateImportDealResponse")]
        string PartialUpdateImportDeal(byte[] file, string fileNameWithExtension);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDealServiceChannel : ElvizTestUtils.DealServiceReference.IDealService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DealServiceClient : System.ServiceModel.ClientBase<ElvizTestUtils.DealServiceReference.IDealService>, ElvizTestUtils.DealServiceReference.IDealService {
        
        public DealServiceClient() {
        }
        
        public DealServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DealServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DealServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DealServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string ImportDeal(string xmlDealAsString) {
            return base.Channel.ImportDeal(xmlDealAsString);
        }
        
        public bool UpdateStatus(System.Collections.Generic.Dictionary<int, ElvizTestUtils.DealServiceReference.TransactionStatus> data) {
            return base.Channel.UpdateStatus(data);
        }
        
        public bool SetPropertyValues(System.Collections.Generic.Dictionary<int, ElvizTestUtils.DealServiceReference.PropertyValuePair[]> transactionPropertyValues) {
            return base.Channel.SetPropertyValues(transactionPropertyValues);
        }
        
        public bool SetGroupField(int[] transactionIds, ElvizTestUtils.DealServiceReference.GroupFields dealGroup, string value) {
            return base.Channel.SetGroupField(transactionIds, dealGroup, value);
        }
        
        public string PartialUpdateImportDeal(byte[] file, string fileNameWithExtension) {
            return base.Channel.PartialUpdateImportDeal(file, fileNameWithExtension);
        }
    }
}
