//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ElvizTestUtils.VolatilityServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Option", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class Option : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> OptionExpiryField;
        
        private System.DateTime OptionFromDateField;
        
        private string OptionLoadTypeField;
        
        private System.DateTime OptionToDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriceBookAppendixField;
        
        private string ReferenceAreaNameField;
        
        private System.DateTime ReportDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double StrikeField;
        
        private string TemplateNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> OptionExpiry {
            get {
                return this.OptionExpiryField;
            }
            set {
                if ((this.OptionExpiryField.Equals(value) != true)) {
                    this.OptionExpiryField = value;
                    this.RaisePropertyChanged("OptionExpiry");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime OptionFromDate {
            get {
                return this.OptionFromDateField;
            }
            set {
                if ((this.OptionFromDateField.Equals(value) != true)) {
                    this.OptionFromDateField = value;
                    this.RaisePropertyChanged("OptionFromDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string OptionLoadType {
            get {
                return this.OptionLoadTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.OptionLoadTypeField, value) != true)) {
                    this.OptionLoadTypeField = value;
                    this.RaisePropertyChanged("OptionLoadType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime OptionToDate {
            get {
                return this.OptionToDateField;
            }
            set {
                if ((this.OptionToDateField.Equals(value) != true)) {
                    this.OptionToDateField = value;
                    this.RaisePropertyChanged("OptionToDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PriceBookAppendix {
            get {
                return this.PriceBookAppendixField;
            }
            set {
                if ((object.ReferenceEquals(this.PriceBookAppendixField, value) != true)) {
                    this.PriceBookAppendixField = value;
                    this.RaisePropertyChanged("PriceBookAppendix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ReferenceAreaName {
            get {
                return this.ReferenceAreaNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferenceAreaNameField, value) != true)) {
                    this.ReferenceAreaNameField = value;
                    this.RaisePropertyChanged("ReferenceAreaName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime ReportDate {
            get {
                return this.ReportDateField;
            }
            set {
                if ((this.ReportDateField.Equals(value) != true)) {
                    this.ReportDateField = value;
                    this.RaisePropertyChanged("ReportDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Strike {
            get {
                return this.StrikeField;
            }
            set {
                if ((this.StrikeField.Equals(value) != true)) {
                    this.StrikeField = value;
                    this.RaisePropertyChanged("Strike");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string TemplateName {
            get {
                return this.TemplateNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TemplateNameField, value) != true)) {
                    this.TemplateNameField = value;
                    this.RaisePropertyChanged("TemplateName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OptionStripDescription", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class OptionStripDescription : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ExerciseTimeOfDayField;
        
        private string OptionLoadTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriceBookAppendixField;
        
        private string ReferenceAreaNameField;
        
        private System.DateTime ReportDateField;
        
        private string ResolutionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double StrikeField;
        
        private System.DateTime StripFromDateField;
        
        private System.DateTime StripToDateField;
        
        private string TemplateNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ExerciseTimeOfDay {
            get {
                return this.ExerciseTimeOfDayField;
            }
            set {
                if ((this.ExerciseTimeOfDayField.Equals(value) != true)) {
                    this.ExerciseTimeOfDayField = value;
                    this.RaisePropertyChanged("ExerciseTimeOfDay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string OptionLoadType {
            get {
                return this.OptionLoadTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.OptionLoadTypeField, value) != true)) {
                    this.OptionLoadTypeField = value;
                    this.RaisePropertyChanged("OptionLoadType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PriceBookAppendix {
            get {
                return this.PriceBookAppendixField;
            }
            set {
                if ((object.ReferenceEquals(this.PriceBookAppendixField, value) != true)) {
                    this.PriceBookAppendixField = value;
                    this.RaisePropertyChanged("PriceBookAppendix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ReferenceAreaName {
            get {
                return this.ReferenceAreaNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferenceAreaNameField, value) != true)) {
                    this.ReferenceAreaNameField = value;
                    this.RaisePropertyChanged("ReferenceAreaName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime ReportDate {
            get {
                return this.ReportDateField;
            }
            set {
                if ((this.ReportDateField.Equals(value) != true)) {
                    this.ReportDateField = value;
                    this.RaisePropertyChanged("ReportDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Resolution {
            get {
                return this.ResolutionField;
            }
            set {
                if ((object.ReferenceEquals(this.ResolutionField, value) != true)) {
                    this.ResolutionField = value;
                    this.RaisePropertyChanged("Resolution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Strike {
            get {
                return this.StrikeField;
            }
            set {
                if ((this.StrikeField.Equals(value) != true)) {
                    this.StrikeField = value;
                    this.RaisePropertyChanged("Strike");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime StripFromDate {
            get {
                return this.StripFromDateField;
            }
            set {
                if ((this.StripFromDateField.Equals(value) != true)) {
                    this.StripFromDateField = value;
                    this.RaisePropertyChanged("StripFromDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime StripToDate {
            get {
                return this.StripToDateField;
            }
            set {
                if ((this.StripToDateField.Equals(value) != true)) {
                    this.StripToDateField = value;
                    this.RaisePropertyChanged("StripToDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string TemplateName {
            get {
                return this.TemplateNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TemplateNameField, value) != true)) {
                    this.TemplateNameField = value;
                    this.RaisePropertyChanged("TemplateName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OptionStripVolatility", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class OptionStripVolatility : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FromDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double VolatilityField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FromDateTime {
            get {
                return this.FromDateTimeField;
            }
            set {
                if ((this.FromDateTimeField.Equals(value) != true)) {
                    this.FromDateTimeField = value;
                    this.RaisePropertyChanged("FromDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Volatility {
            get {
                return this.VolatilityField;
            }
            set {
                if ((this.VolatilityField.Equals(value) != true)) {
                    this.VolatilityField = value;
                    this.RaisePropertyChanged("Volatility");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Elviz.API", ConfigurationName="VolatilityServiceReference.IVolatilityService")]
    public interface IVolatilityService {
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/IVolatilityService/GetImplicitVolatilitiesFromSurface", ReplyAction="Elviz.API/IVolatilityService/GetImplicitVolatilitiesFromSurfaceResponse")]
        double[] GetImplicitVolatilitiesFromSurface(ElvizTestUtils.VolatilityServiceReference.Option[] options);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/IVolatilityService/GetImplicitVolatilitiesForStripFromSurface", ReplyAction="Elviz.API/IVolatilityService/GetImplicitVolatilitiesForStripFromSurfaceResponse")]
        ElvizTestUtils.VolatilityServiceReference.OptionStripVolatility[] GetImplicitVolatilitiesForStripFromSurface(ElvizTestUtils.VolatilityServiceReference.OptionStripDescription options);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IVolatilityServiceChannel : ElvizTestUtils.VolatilityServiceReference.IVolatilityService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class VolatilityServiceClient : System.ServiceModel.ClientBase<ElvizTestUtils.VolatilityServiceReference.IVolatilityService>, ElvizTestUtils.VolatilityServiceReference.IVolatilityService {
        
        public VolatilityServiceClient() {
        }
        
        public VolatilityServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public VolatilityServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public VolatilityServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public VolatilityServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double[] GetImplicitVolatilitiesFromSurface(ElvizTestUtils.VolatilityServiceReference.Option[] options) {
            return base.Channel.GetImplicitVolatilitiesFromSurface(options);
        }
        
        public ElvizTestUtils.VolatilityServiceReference.OptionStripVolatility[] GetImplicitVolatilitiesForStripFromSurface(ElvizTestUtils.VolatilityServiceReference.OptionStripDescription options) {
            return base.Channel.GetImplicitVolatilitiesForStripFromSurface(options);
        }
    }
}
