//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestWCFCurveService.CurveServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PriceCurveDto", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class PriceCurveDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommodityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrencyUnitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsIndexPriceCurveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsMarketPriceCurveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsProxyPriceCurveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoadTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriceBookAppendixField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriceBookNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestWCFCurveService.CurveServiceReference.PriceCurveVolatilityDto PriceCurveVolatilityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PriceSeriesEndUtcField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriceSeriesResolutionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PriceSeriesStartUtcField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] PricesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReferenceAreaNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ReportDateUtcField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime[] ValueDatesUtcField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VolumeUnitField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CommodityName {
            get {
                return this.CommodityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CommodityNameField, value) != true)) {
                    this.CommodityNameField = value;
                    this.RaisePropertyChanged("CommodityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Currency {
            get {
                return this.CurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrencyField, value) != true)) {
                    this.CurrencyField = value;
                    this.RaisePropertyChanged("Currency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrencyUnit {
            get {
                return this.CurrencyUnitField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrencyUnitField, value) != true)) {
                    this.CurrencyUnitField = value;
                    this.RaisePropertyChanged("CurrencyUnit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsIndexPriceCurve {
            get {
                return this.IsIndexPriceCurveField;
            }
            set {
                if ((this.IsIndexPriceCurveField.Equals(value) != true)) {
                    this.IsIndexPriceCurveField = value;
                    this.RaisePropertyChanged("IsIndexPriceCurve");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMarketPriceCurve {
            get {
                return this.IsMarketPriceCurveField;
            }
            set {
                if ((this.IsMarketPriceCurveField.Equals(value) != true)) {
                    this.IsMarketPriceCurveField = value;
                    this.RaisePropertyChanged("IsMarketPriceCurve");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsProxyPriceCurve {
            get {
                return this.IsProxyPriceCurveField;
            }
            set {
                if ((this.IsProxyPriceCurveField.Equals(value) != true)) {
                    this.IsProxyPriceCurveField = value;
                    this.RaisePropertyChanged("IsProxyPriceCurve");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LoadType {
            get {
                return this.LoadTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.LoadTypeField, value) != true)) {
                    this.LoadTypeField = value;
                    this.RaisePropertyChanged("LoadType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PriceBookAppendix {
            get {
                return this.PriceBookAppendixField;
            }
            set {
                if ((object.ReferenceEquals(this.PriceBookAppendixField, value) != true)) {
                    this.PriceBookAppendixField = value;
                    this.RaisePropertyChanged("PriceBookAppendix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PriceBookName {
            get {
                return this.PriceBookNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PriceBookNameField, value) != true)) {
                    this.PriceBookNameField = value;
                    this.RaisePropertyChanged("PriceBookName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestWCFCurveService.CurveServiceReference.PriceCurveVolatilityDto PriceCurveVolatility {
            get {
                return this.PriceCurveVolatilityField;
            }
            set {
                if ((object.ReferenceEquals(this.PriceCurveVolatilityField, value) != true)) {
                    this.PriceCurveVolatilityField = value;
                    this.RaisePropertyChanged("PriceCurveVolatility");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PriceSeriesEndUtc {
            get {
                return this.PriceSeriesEndUtcField;
            }
            set {
                if ((this.PriceSeriesEndUtcField.Equals(value) != true)) {
                    this.PriceSeriesEndUtcField = value;
                    this.RaisePropertyChanged("PriceSeriesEndUtc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PriceSeriesResolution {
            get {
                return this.PriceSeriesResolutionField;
            }
            set {
                if ((object.ReferenceEquals(this.PriceSeriesResolutionField, value) != true)) {
                    this.PriceSeriesResolutionField = value;
                    this.RaisePropertyChanged("PriceSeriesResolution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PriceSeriesStartUtc {
            get {
                return this.PriceSeriesStartUtcField;
            }
            set {
                if ((this.PriceSeriesStartUtcField.Equals(value) != true)) {
                    this.PriceSeriesStartUtcField = value;
                    this.RaisePropertyChanged("PriceSeriesStartUtc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] Prices {
            get {
                return this.PricesField;
            }
            set {
                if ((object.ReferenceEquals(this.PricesField, value) != true)) {
                    this.PricesField = value;
                    this.RaisePropertyChanged("Prices");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReferenceAreaName {
            get {
                return this.ReferenceAreaNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferenceAreaNameField, value) != true)) {
                    this.ReferenceAreaNameField = value;
                    this.RaisePropertyChanged("ReferenceAreaName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ReportDateUtc {
            get {
                return this.ReportDateUtcField;
            }
            set {
                if ((this.ReportDateUtcField.Equals(value) != true)) {
                    this.ReportDateUtcField = value;
                    this.RaisePropertyChanged("ReportDateUtc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime[] ValueDatesUtc {
            get {
                return this.ValueDatesUtcField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueDatesUtcField, value) != true)) {
                    this.ValueDatesUtcField = value;
                    this.RaisePropertyChanged("ValueDatesUtc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VolumeUnit {
            get {
                return this.VolumeUnitField;
            }
            set {
                if ((object.ReferenceEquals(this.VolumeUnitField, value) != true)) {
                    this.VolumeUnitField = value;
                    this.RaisePropertyChanged("VolumeUnit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PriceCurveVolatilityDto", Namespace="Elviz.API")]
    [System.SerializableAttribute()]
    public partial class PriceCurveVolatilityDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SummerLongField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SummerMediumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SummerNumberOfYearsBetweenShortAndMediumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SummerShortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WinterLongField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WinterMediumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WinterNumberOfYearsBetweenShortAndMediumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WinterShortField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SummerLong {
            get {
                return this.SummerLongField;
            }
            set {
                if ((this.SummerLongField.Equals(value) != true)) {
                    this.SummerLongField = value;
                    this.RaisePropertyChanged("SummerLong");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SummerMedium {
            get {
                return this.SummerMediumField;
            }
            set {
                if ((this.SummerMediumField.Equals(value) != true)) {
                    this.SummerMediumField = value;
                    this.RaisePropertyChanged("SummerMedium");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SummerNumberOfYearsBetweenShortAndMedium {
            get {
                return this.SummerNumberOfYearsBetweenShortAndMediumField;
            }
            set {
                if ((this.SummerNumberOfYearsBetweenShortAndMediumField.Equals(value) != true)) {
                    this.SummerNumberOfYearsBetweenShortAndMediumField = value;
                    this.RaisePropertyChanged("SummerNumberOfYearsBetweenShortAndMedium");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SummerShort {
            get {
                return this.SummerShortField;
            }
            set {
                if ((this.SummerShortField.Equals(value) != true)) {
                    this.SummerShortField = value;
                    this.RaisePropertyChanged("SummerShort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WinterLong {
            get {
                return this.WinterLongField;
            }
            set {
                if ((this.WinterLongField.Equals(value) != true)) {
                    this.WinterLongField = value;
                    this.RaisePropertyChanged("WinterLong");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WinterMedium {
            get {
                return this.WinterMediumField;
            }
            set {
                if ((this.WinterMediumField.Equals(value) != true)) {
                    this.WinterMediumField = value;
                    this.RaisePropertyChanged("WinterMedium");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WinterNumberOfYearsBetweenShortAndMedium {
            get {
                return this.WinterNumberOfYearsBetweenShortAndMediumField;
            }
            set {
                if ((this.WinterNumberOfYearsBetweenShortAndMediumField.Equals(value) != true)) {
                    this.WinterNumberOfYearsBetweenShortAndMediumField = value;
                    this.RaisePropertyChanged("WinterNumberOfYearsBetweenShortAndMedium");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WinterShort {
            get {
                return this.WinterShortField;
            }
            set {
                if ((this.WinterShortField.Equals(value) != true)) {
                    this.WinterShortField = value;
                    this.RaisePropertyChanged("WinterShort");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Elviz.API", ConfigurationName="CurveServiceReference.ICurveService")]
    public interface ICurveService {
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ICurveService/GetPriceCurve", ReplyAction="Elviz.API/ICurveService/GetPriceCurveResponse")]
        TestWCFCurveService.CurveServiceReference.PriceCurveDto GetPriceCurve(string priceBookName, string referenceAreaName, string loadType, System.DateTime reportDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ICurveService/GetPriceCurveByCurrency", ReplyAction="Elviz.API/ICurveService/GetPriceCurveByCurrencyResponse")]
        TestWCFCurveService.CurveServiceReference.PriceCurveDto GetPriceCurveByCurrency(string priceBookName, string referenceAreaName, string loadType, System.DateTime reportDate, string reportCurrencyISOName);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ICurveService/GetForwardInterestRates", ReplyAction="Elviz.API/ICurveService/GetForwardInterestRatesResponse")]
        System.Collections.Generic.KeyValuePair<System.DateTime, double>[] GetForwardInterestRates(string currencyISOCode, string currencySource, System.DateTime reportDate, System.DateTime lastDate, string resolution);
        
        [System.ServiceModel.OperationContractAttribute(Action="Elviz.API/ICurveService/GetForwardExchangeRates", ReplyAction="Elviz.API/ICurveService/GetForwardExchangeRatesResponse")]
        System.Collections.Generic.KeyValuePair<System.DateTime, double>[] GetForwardExchangeRates(string baseCurrencyISOCode, string crossCurrencyISOCode, string currencySource, System.DateTime reportDate, System.DateTime lastDate, string resolution);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICurveServiceChannel : TestWCFCurveService.CurveServiceReference.ICurveService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurveServiceClient : System.ServiceModel.ClientBase<TestWCFCurveService.CurveServiceReference.ICurveService>, TestWCFCurveService.CurveServiceReference.ICurveService {
        
        public CurveServiceClient() {
        }
        
        public CurveServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CurveServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurveServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurveServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TestWCFCurveService.CurveServiceReference.PriceCurveDto GetPriceCurve(string priceBookName, string referenceAreaName, string loadType, System.DateTime reportDate) {
            return base.Channel.GetPriceCurve(priceBookName, referenceAreaName, loadType, reportDate);
        }
        
        public TestWCFCurveService.CurveServiceReference.PriceCurveDto GetPriceCurveByCurrency(string priceBookName, string referenceAreaName, string loadType, System.DateTime reportDate, string reportCurrencyISOName) {
            return base.Channel.GetPriceCurveByCurrency(priceBookName, referenceAreaName, loadType, reportDate, reportCurrencyISOName);
        }
        
        public System.Collections.Generic.KeyValuePair<System.DateTime, double>[] GetForwardInterestRates(string currencyISOCode, string currencySource, System.DateTime reportDate, System.DateTime lastDate, string resolution) {
            return base.Channel.GetForwardInterestRates(currencyISOCode, currencySource, reportDate, lastDate, resolution);
        }
        
        public System.Collections.Generic.KeyValuePair<System.DateTime, double>[] GetForwardExchangeRates(string baseCurrencyISOCode, string crossCurrencyISOCode, string currencySource, System.DateTime reportDate, System.DateTime lastDate, string resolution) {
            return base.Channel.GetForwardExchangeRates(baseCurrencyISOCode, crossCurrencyISOCode, currencySource, reportDate, lastDate, resolution);
        }
    }
}
